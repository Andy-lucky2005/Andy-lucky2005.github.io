<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HarmonyOS一多学习</title>
      <link href="/2025/06/24/%E4%B8%80%E5%A4%9A/"/>
      <url>/2025/06/24/%E4%B8%80%E5%A4%9A/</url>
      
        <content type="html"><![CDATA[<p>AGC平台：</p><p>**华为AGC（AppGallery Connect）**是华为为开发者提供的一站式应用开发与运营服务平台，主要服务于华为生态（如HMS移动应用、HarmonyOS应用等）。</p><p><strong>主要用途：华为应用上架，开通华为服务</strong></p><ul><li><strong>快速开发</strong>：提供开发工具、API和SDK，降低开发门槛。</li><li><strong>应用上架</strong>：支持应用发布到华为应用市场（AppGallery）。</li><li><strong>运营增长</strong>：助力开发者提升应用活跃度、用户留存和变现能力。</li></ul><p>利用AGC平台创建项目（对内）+应用（对外，供别人进行下载）</p><p>应用包名（利用驼峰命名法，确保唯一性）：com.公司域名.hm(此处是鸿蒙应用，如果是安卓可改为az)_**（应用名）</p><h1 id="一、一多定义"><a href="#一、一多定义" class="headerlink" title="一、一多定义"></a>一、一多定义</h1><p><img src="/../images/$%7Bfiilename%7D/1747923243041-7d213228-dfce-4805-a641-35abb20a27bb.png" alt="img"></p><p>“一次开发、多端部署”简称“一多”：一套代码工程，一次开发上架，多端按需部署。</p><p>为了实现这个目标，主要解决 3 个核心问题：</p><p><img src="/../images/$%7Bfiilename%7D/1717126404552-86b1ce20-7e84-4893-a336-3f416a6ec755.png" alt="img"></p><ol><li><strong>页面适配问题：界面级一多 - ArkUI（响应式布局&#x2F;自适应布局）</strong></li><li><strong>功能兼容问题：功能级一多</strong></li><li><strong>工程如何组织：工程级一多 - 模块化按需部署（三层架构）</strong></li></ol><h1 id="二、界面级一多能力"><a href="#二、界面级一多能力" class="headerlink" title="二、界面级一多能力"></a><strong>二、界面级一多能力</strong></h1><p><strong>此处主要解决的是1.界面适配问题</strong></p><p><img src="/../images/$%7Bfiilename%7D/1747923696761-44256009-135a-4f4c-a365-4a62e7816e13.png" alt="img"></p><p>界面级一多能力有 2 类：</p><ol><li><strong>自适应布局:</strong> 略微调整界面结构 - 第一个图片以及第二个图片，如果界面宽度增大，对应显示商品也会进行适应增加，界面略微进行调整</li><li>**响应式布局：**比较大的界面调整 - 例如第三个平板界面（导航栏移动到左侧 界面进行了较大程度的调整）</li></ol><h2 id="2-1、自适应布局"><a href="#2-1、自适应布局" class="headerlink" title="2.1、自适应布局"></a>2.1、自适应布局</h2><p><img src="/../images/$%7Bfiilename%7D/1747963680355-1ac66906-cd87-4216-a6ee-84a42c605987.png" alt="img"></p><h3 id="2-1-1、自适应拉伸"><a href="#2-1-1、自适应拉伸" class="headerlink" title="2.1.1、自适应拉伸"></a>2.1.1、自适应拉伸</h3><h4 id="2-1-1-1-拉伸能力（增大or减小区域分配给容器组件）"><a href="#2-1-1-1-拉伸能力（增大or减小区域分配给容器组件）" class="headerlink" title="2.1.1.1 拉伸能力（增大or减小区域分配给容器组件）"></a>2.1.1.1 拉伸能力（增大or减小区域分配给容器组件）</h4><p>拉伸能力是指容器组件尺寸发生变化时，增加或减小的空间全部分配给容器组件内指定区域。</p><p>1&gt; <strong>flexGrow &#x2F;</strong> <strong>flexShrink</strong></p><p><strong>该部分重点为了解layoutweight与flenGrow &#x2F;</strong> <strong>flexShrink之间的区别</strong></p><p>**举一个例子：为Image图片添加layoutweight可以发现确实可以进行容器宽度的匹配，但是视觉效果不佳，**<strong>layoutweight会同时对组件进行缩小与放大</strong></p><p><img src="/../images/$%7Bfiilename%7D/1747963975108-d9cb26c7-575c-435b-8b48-60449ff9edb6.png" alt="img"></p><p>如果想要只在<strong>特定情况对组件进行增大或者缩小</strong>，就要使用到<strong>flexGrow &#x2F;</strong> <strong>flexShrink</strong></p><p><strong>代码中为Row Image添加该属性，对Row添加.flexGrow(0).flexShrink(1)表示容器只会缩小不会增大</strong></p><p><strong>对Image添加.flexGrow(1).flexShrink(0)表示容器只会增大不会缩小</strong></p><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/adaptive-layout-V5#%E6%8B%89%E4%BC%B8%E8%83%BD%E5%8A%9B"><strong>flexShrink&#x2F;flexGrow</strong></a></p><p><img src="/../images/$%7Bfiilename%7D/1747964521978-91c43abd-5e76-4c04-9481-458ef89d068e.png" alt="img"></p><p><img src="/../images/$%7Bfiilename%7D/1747964340965-84cb327a-558b-4612-9aa6-2224e6dfd115.png" alt="img"></p><h4 id="2-1-1-2-均分能力（区域分配给空白）"><a href="#2-1-1-2-均分能力（区域分配给空白）" class="headerlink" title="2.1.1.2 均分能力（区域分配给空白）"></a>2.1.1.2 均分能力（区域分配给空白）</h4><p>文字和开关的尺寸固定，仅有中间空白区域（Blank组件）随父容器尺寸变化而伸缩。</p><p>均分能力：blank</p><p><img src="/../images/$%7Bfiilename%7D/1747965788394-ae027f29-a016-461b-804d-135e80c55ee0.png" alt="img"></p><p><img src="/../images/$%7Bfiilename%7D/1747965821838-46eab905-20b5-4fb0-8f69-82b2cb83b8cd.png" alt="img"></p><p><strong>使用blank组件进行中间部分的拉伸</strong></p><p>均分能力： justifyContent(FlexAlign.SpaceBetween)属性</p><p><img src="/../images/$%7Bfiilename%7D/1747972785863-23cea261-408d-430d-a9c1-bd767321dc35.png" alt="img"></p><p>通过设置该属性可以使组件按照父组件尺寸进行适应分布</p><p><img src="/../images/$%7Bfiilename%7D/1747972956612-8006fe69-9748-4af1-bec6-e75cff9c7cd3.png" alt="img"></p><h3 id="2-1-2-自适应缩放"><a href="#2-1-2-自适应缩放" class="headerlink" title="2.1.2 自适应缩放"></a>2.1.2 自适应缩放</h3><h4 id="2-1-2-1-占比能力"><a href="#2-1-2-1-占比能力" class="headerlink" title="2.1.2.1 占比能力"></a>2.1.2.1 占比能力</h4><p>占比能力是指子组件的宽高按照<strong>预设的比例</strong>，随父容器组件发生变化。– layoutweight属性</p><p><img src="/../images/$%7Bfiilename%7D/1747985101114-7ce19479-7313-4365-844e-3ce7d4dd9b56.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct ProportionCapabilitySample &#123;</span><br><span class="line">  @State rate: number = 0.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 底部滑块，可以通过拖拽滑块改变容器尺寸</span><br><span class="line">  @Builder slider() &#123;</span><br><span class="line">    Slider(&#123; value: 100, min: 25, max: 50, style: SliderStyle.OutSet &#125;)</span><br><span class="line">      .blockColor(Color.White)</span><br><span class="line">      .width(&#x27;60%&#x27;)</span><br><span class="line">      .height(50)</span><br><span class="line">      .onChange((value: number) =&gt; &#123;</span><br><span class="line">        this.rate = value / 100</span><br><span class="line">      &#125;)</span><br><span class="line">      .position(&#123; x: &#x27;20%&#x27;, y: &#x27;80%&#x27; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Column() &#123;</span><br><span class="line">        Row() &#123;</span><br><span class="line">          Column() &#123;</span><br><span class="line">            Image($r(&quot;app.media.ic_public_play_last&quot;))</span><br><span class="line">              .width(48)</span><br><span class="line">              .height(48)</span><br><span class="line">          &#125;</span><br><span class="line">          .height(96)</span><br><span class="line">          .layoutWeight(1)  // 设置子组件在父容器主轴方向的布局权重</span><br><span class="line">          .justifyContent(FlexAlign.Center)</span><br><span class="line">          .alignItems(HorizontalAlign.Center)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          Column() &#123;</span><br><span class="line">            Image($r(&quot;app.media.ic_public_pause&quot;))</span><br><span class="line">              .width(48)</span><br><span class="line">              .height(48)</span><br><span class="line">          &#125;</span><br><span class="line">          .height(96)</span><br><span class="line">          .layoutWeight(1)  // 设置子组件在父容器主轴方向的布局权重</span><br><span class="line">          .backgroundColor(&#x27;#66F1CCB8&#x27;)</span><br><span class="line">          .justifyContent(FlexAlign.Center)</span><br><span class="line">          .alignItems(HorizontalAlign.Center)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          Column() &#123;</span><br><span class="line">            Image($r(&quot;app.media.ic_public_play_next&quot;))</span><br><span class="line">              .width(48)</span><br><span class="line">              .height(48)</span><br><span class="line">          &#125;</span><br><span class="line">          .height(96)</span><br><span class="line">          .layoutWeight(1)  // 设置子组件在父容器主轴方向的布局权重</span><br><span class="line">          .justifyContent(FlexAlign.Center)</span><br><span class="line">          .alignItems(HorizontalAlign.Center)</span><br><span class="line">        &#125;</span><br><span class="line">        .width(this.rate * 100 + &#x27;%&#x27;)</span><br><span class="line">        .height(96)</span><br><span class="line">        .borderRadius(16)</span><br><span class="line">        .backgroundColor(&#x27;#FFFFFF&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      this.slider()</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(&#x27;#F1F3F5&#x27;)</span><br><span class="line">    .justifyContent(FlexAlign.Center)</span><br><span class="line">    .alignItems(HorizontalAlign.Center)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-2-缩放能力"><a href="#2-1-2-2-缩放能力" class="headerlink" title="2.1.2.2 缩放能力"></a>2.1.2.2 缩放能力</h4><p>缩放能力是指子组件的宽高按照预设的比例，随容器组件发生变化，且变化过程中子组件的<strong>宽高比不变</strong>。</p><p>aspectRatio - 固定图片宽高比</p><p>不加该属性组件的宽高比会发生变化</p><p><img src="/../images/$%7Bfiilename%7D/1747985918541-a0652966-6fbc-4f4b-adea-cd23d4ab226a.png" alt="img"></p><p>添加aspectRatio（）属性 - 图片宽高比固定</p><p><img src="/../images/$%7Bfiilename%7D/1747986417497-cafd3aac-f1de-4809-b3ae-550fda48c455.png" alt="img"></p><p><strong>注意点：</strong></p><p>有的时候会加载网络图片 - 网络速度慢的时候图片会加载不出来（例如下图如果网络图片加载不出来，文字会占据图片的位置） - 此时需要预留出马上要加载出来的图片位置 - aspectRatio即可实现预留图片位置</p><p><img src="/../images/$%7Bfiilename%7D/1747986474268-5029420b-1b81-401a-9826-2c3c2738900b.png" alt="img"></p><h3 id="2-1-3-自适应延伸"><a href="#2-1-3-自适应延伸" class="headerlink" title="2.1.3 自适应延伸"></a>2.1.3 自适应延伸</h3><h4 id="2-1-3-1-延伸能力"><a href="#2-1-3-1-延伸能力" class="headerlink" title="2.1.3.1 延伸能力"></a>2.1.3.1 延伸能力</h4><p><img src="/../images/$%7Bfiilename%7D/1748404209829-639ed929-0b06-466c-b3ef-df911f7c83bb.png" alt="img"></p><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/adaptive-layout-V5#%E5%BB%B6%E4%BC%B8%E8%83%BD%E5%8A%9B">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/adaptive-layout-V5#%E5%BB%B6%E4%BC%B8%E8%83%BD%E5%8A%9B</a></p><ol><li><strong>延伸能力使用List组件进行实现</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct ExtensionCapabilitySample1 &#123;</span><br><span class="line">  @State rate: number = 0.60</span><br><span class="line">  readonly appList: number [] = [0, 1, 2, 3, 4, 5, 6, 7]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 底部滑块，可以通过拖拽滑块改变容器尺寸</span><br><span class="line">  @Builder slider() &#123;</span><br><span class="line">    Slider(&#123; value: this.rate * 100, min: 8, max: 60, style: SliderStyle.OutSet &#125;)</span><br><span class="line">      .blockColor(Color.White)</span><br><span class="line">      .width(&#x27;60%&#x27;)</span><br><span class="line">      .height(50)</span><br><span class="line">      .onChange((value: number) =&gt; &#123;</span><br><span class="line">        this.rate = value / 100</span><br><span class="line">      &#125;)</span><br><span class="line">      .position(&#123; x: &#x27;20%&#x27;, y: &#x27;80%&#x27; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Row(&#123; space: 10 &#125;) &#123;</span><br><span class="line">        // 通过List组件实现隐藏能力</span><br><span class="line">        List(&#123; space: 10 &#125;) &#123;</span><br><span class="line">          ForEach(this.appList, (item:number) =&gt; &#123;</span><br><span class="line">            ListItem() &#123;</span><br><span class="line">              Column() &#123;</span><br><span class="line">                Image($r(&quot;app.media.startIcon&quot;)).width(48).height(48).margin(&#123; top: 8 &#125;)</span><br><span class="line">                Text(&#x27;App name&#x27;)</span><br><span class="line">                  .width(64)</span><br><span class="line">                  .height(30)</span><br><span class="line">                  .lineHeight(15)</span><br><span class="line">                  .fontSize(12)</span><br><span class="line">                  .textAlign(TextAlign.Center)</span><br><span class="line">                  .margin(&#123; top: 8 &#125;)</span><br><span class="line">                  .padding(&#123; bottom: 15 &#125;)</span><br><span class="line">              &#125;.width(80).height(102)</span><br><span class="line">            &#125;.width(80).height(102)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(&#123; top: 16, left: 10 &#125;)</span><br><span class="line">        .listDirection(Axis.Horizontal) // list列表的方向</span><br><span class="line">        // .lanes(2) // 交叉轴行列数</span><br><span class="line">        .width(&#x27;100%&#x27;)</span><br><span class="line">        .height(118)</span><br><span class="line">        .borderRadius(16)</span><br><span class="line">        .backgroundColor(Color.White)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(this.rate * 100 + &#x27;%&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      this.slider()</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(&#x27;#F1F3F5&#x27;)</span><br><span class="line">    .justifyContent(FlexAlign.Center)</span><br><span class="line">    .alignItems(HorizontalAlign.Center)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1748404145683-6f47deb7-32f6-4ff9-bd15-1d82e15f4a46.png" alt="img"></p><ol><li><strong>通过Scroll以及Row组件进行实现伸缩效果</strong></li></ol><p>实现思路： 在Row组件外嵌套一个Scroll容器组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct ExtensionCapabilitySample2 &#123;</span><br><span class="line">  private scroller: Scroller = new Scroller()</span><br><span class="line">  @State rate: number = 0.60</span><br><span class="line">  @State appList: number [] = [0, 1, 2, 3, 4, 5, 6, 7]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 底部滑块，可以通过拖拽滑块改变容器尺寸</span><br><span class="line">  @Builder slider() &#123;</span><br><span class="line">    Slider(&#123; value: this.rate * 100, min: 8, max: 60, style: SliderStyle.OutSet &#125;)</span><br><span class="line">      .blockColor(Color.White)</span><br><span class="line">      .width(&#x27;60%&#x27;)</span><br><span class="line">      .height(50)</span><br><span class="line">      .onChange((value: number) =&gt; &#123;</span><br><span class="line">        this.rate = value / 100;</span><br><span class="line">      &#125;)</span><br><span class="line">      .position(&#123; x: &#x27;20%&#x27;, y: &#x27;80%&#x27; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      // 通过Scroll和Row组件实现隐藏能力</span><br><span class="line">      Scroll(this.scroller) &#123;</span><br><span class="line">        Row(&#123; space: 10 &#125;) &#123;</span><br><span class="line">          ForEach(this.appList, () =&gt; &#123;</span><br><span class="line">            Column() &#123;</span><br><span class="line">              Image($r(&quot;app.media.startIcon&quot;)).width(48).height(48).margin(&#123; top: 8 &#125;)</span><br><span class="line">              Text(&#x27;App name&#x27;)</span><br><span class="line">                .width(64)</span><br><span class="line">                .height(30)</span><br><span class="line">                .lineHeight(15)</span><br><span class="line">                .fontSize(12)</span><br><span class="line">                .textAlign(TextAlign.Center)</span><br><span class="line">                .margin(&#123; top: 8 &#125;)</span><br><span class="line">                .padding(&#123; bottom: 15 &#125;)</span><br><span class="line">            &#125;.width(80).height(102)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(&#123; top: 16, left: 10 &#125;)</span><br><span class="line">        .height(118)</span><br><span class="line">        .backgroundColor(Color.White)</span><br><span class="line">      &#125;</span><br><span class="line">      .scrollable(ScrollDirection.Horizontal)</span><br><span class="line">      .borderRadius(16)</span><br><span class="line">      .width(this.rate * 100 + &#x27;%&#x27;)</span><br><span class="line">      this.slider()</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(&#x27;#F1F3F5&#x27;)</span><br><span class="line">    .justifyContent(FlexAlign.Center)</span><br><span class="line">    .alignItems(HorizontalAlign.Center)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-2-隐藏能力"><a href="#2-1-3-2-隐藏能力" class="headerlink" title="2.1.3.2 隐藏能力"></a>2.1.3.2 隐藏能力</h4><p>隐藏能力是指容器组件内的子组件，按照其预设的显示优先级，随容器组件尺寸变化显示或隐藏，其中相同显示优先级的子组件同时显示或隐藏。.displayPriority(2)  &#x2F;&#x2F; 布局优先级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct HiddenCapabilitySample &#123;</span><br><span class="line">  @State rate: number = 0.45</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 底部滑块，可以通过拖拽滑块改变容器尺寸</span><br><span class="line">  @Builder slider() &#123;</span><br><span class="line">    Slider(&#123; value: this.rate * 100, min: 10, max: 45, style: SliderStyle.OutSet &#125;)</span><br><span class="line">      .blockColor(Color.White)</span><br><span class="line">      .width(&#x27;60%&#x27;)</span><br><span class="line">      .height(50)</span><br><span class="line">      .onChange((value: number) =&gt; &#123;</span><br><span class="line">        this.rate = value / 100</span><br><span class="line">      &#125;)</span><br><span class="line">      .position(&#123; x: &#x27;20%&#x27;, y: &#x27;80%&#x27; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Row(&#123; space:24 &#125;) &#123;</span><br><span class="line">        Image($r(&quot;app.media.ic_public_favor&quot;))</span><br><span class="line">          .width(48)</span><br><span class="line">          .height(48)</span><br><span class="line">          .objectFit(ImageFit.Contain)</span><br><span class="line">          .displayPriority(1)  // 布局优先级</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Image($r(&quot;app.media.ic_video_grid_9&quot;))</span><br><span class="line">          .width(48)</span><br><span class="line">          .height(48)</span><br><span class="line">          .objectFit(ImageFit.Contain)</span><br><span class="line">          .displayPriority(2)  // 布局优先级</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Image($r(&quot;app.media.ic_video_grid_8&quot;))</span><br><span class="line">          .width(48)</span><br><span class="line">          .height(48)</span><br><span class="line">          .objectFit(ImageFit.Contain)</span><br><span class="line">          .displayPriority(3)  // 布局优先级</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Image($r(&quot;app.media.ic_video_grid_6&quot;))</span><br><span class="line">          .width(48)</span><br><span class="line">          .height(48)</span><br><span class="line">          .objectFit(ImageFit.Contain)</span><br><span class="line">          .displayPriority(2)  // 布局优先级</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Image($r(&quot;app.media.ic_video_grid_3&quot;))</span><br><span class="line">          .width(48)</span><br><span class="line">          .height(48)</span><br><span class="line">          .objectFit(ImageFit.Contain)</span><br><span class="line">          .displayPriority(1)  // 布局优先级</span><br><span class="line">      &#125;</span><br><span class="line">      .width(this.rate * 100 + &#x27;%&#x27;)</span><br><span class="line">      .height(96)</span><br><span class="line">      .borderRadius(16)</span><br><span class="line">      .backgroundColor(&#x27;#FFFFFF&#x27;)</span><br><span class="line">      .justifyContent(FlexAlign.Center)</span><br><span class="line">      .alignItems(VerticalAlign.Center)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      this.slider()</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(&#x27;#F1F3F5&#x27;)</span><br><span class="line">    .justifyContent(FlexAlign.Center)</span><br><span class="line">    .alignItems(HorizontalAlign.Center)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现：</strong></p><p>根据代码中设置的优先级，当父容器宽度缩小时会<strong>首先隐藏优先级小的组件</strong></p><p><img src="/../images/$%7Bfiilename%7D/1748507201767-9c441b0f-8602-4718-b804-65294fbfc1cb.png" alt="img"></p><p><img src="/../images/$%7Bfiilename%7D/1748507139198-174dc09b-2b9d-45a8-95a6-2ddb26abed6a.png" alt="img"></p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>设置优先级一般都要进行设置，如果不进行设置会默认为最小级</p><h3 id="2-1-4-自适应折行"><a href="#2-1-4-自适应折行" class="headerlink" title="2.1.4 自适应折行"></a>2.1.4 自适应折行</h3><h4 id="2-1-4-1-折行能力"><a href="#2-1-4-1-折行能力" class="headerlink" title="2.1.4.1 折行能力"></a>2.1.4.1 折行能力</h4><p><strong>Flex组件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct WrapCapabilitySample &#123;</span><br><span class="line">  @State rate: number = 0.7</span><br><span class="line">  readonly imageList: Resource [] = [</span><br><span class="line">    $r(&#x27;app.media.ic_video_grid_7&#x27;),</span><br><span class="line">    $r(&#x27;app.media.ic_video_grid_7&#x27;),</span><br><span class="line">    $r(&#x27;app.media.ic_video_grid_7&#x27;),</span><br><span class="line">    $r(&#x27;app.media.ic_video_grid_7&#x27;),</span><br><span class="line">    $r(&#x27;app.media.ic_video_grid_7&#x27;),</span><br><span class="line">    $r(&#x27;app.media.ic_video_grid_7&#x27;)</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 底部滑块，可以通过拖拽滑块改变容器尺寸</span><br><span class="line">  @Builder slider() &#123;</span><br><span class="line">    Slider(&#123; value: this.rate * 100, min: 50, max: 70, style: SliderStyle.OutSet &#125;)</span><br><span class="line">      .blockColor(Color.White)</span><br><span class="line">      .width(&#x27;60%&#x27;)</span><br><span class="line">      .onChange((value: number) =&gt; &#123;</span><br><span class="line">        this.rate = value / 100</span><br><span class="line">      &#125;)</span><br><span class="line">      .position(&#123; x: &#x27;20%&#x27;, y: &#x27;87%&#x27; &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Flex(&#123; justifyContent: FlexAlign.Center, direction: FlexDirection.Column &#125;) &#123;</span><br><span class="line">      Column() &#123;</span><br><span class="line">        // 通过Flex组件warp参数实现自适应折行</span><br><span class="line">        // TODO 为什么不推荐使用flex进行布局 - 性能不如线性布局（因为需要计算什么时候需要进行换行，多了一个计算的过程）</span><br><span class="line">        Flex(&#123;</span><br><span class="line">          // TODO 需要进行折行的时候用flex组件</span><br><span class="line">          direction: FlexDirection.Row, //flex布局方向</span><br><span class="line">          alignItems: ItemAlign.Center,</span><br><span class="line">          justifyContent: FlexAlign.Center,</span><br><span class="line">          wrap: FlexWrap.Wrap //折行能力</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">          ForEach(this.imageList, (item:Resource) =&gt; &#123;</span><br><span class="line">            Image(item).width(183).height(138).padding(10)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        .backgroundColor(&#x27;#FFFFFF&#x27;)</span><br><span class="line">        .padding(20)</span><br><span class="line">        .width(this.rate * 100 + &#x27;%&#x27;)</span><br><span class="line">        .borderRadius(16)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      this.slider()</span><br><span class="line">    &#125;.width(&#x27;100%&#x27;)</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(&#x27;#F1F3F5&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1748508429594-b9cef3a1-7164-492f-917b-dd917b22f966.png" alt="img"><img src="/../images/$%7Bfiilename%7D/1748508477061-90e8e1bc-c325-4fc1-a8f1-f420721fc7cc.png" alt="img"></p><h5 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h5><p>为什么不推荐使用flex进行布局 - 性能不如线性布局（因为需要计算什么时候需要进行换行，多了一个计算的过程）</p><h2 id="2-2-响应式布局"><a href="#2-2-响应式布局" class="headerlink" title="2.2 响应式布局"></a>2.2 响应式布局</h2><p>比较大的界面调整</p><p>自适应布局可以保证窗口尺寸在【一定范围内变化】时，页面的显示是正常的。但是将窗口尺寸【变化较大】时（如窗口宽度从400vp变化为1000vp），仅仅依靠自适应布局可能出现图片异常放大或页面内容稀疏、留白过多等问题，此时就需要借助响应式布局能力调整页面结构。</p><p>响应式布局是指页面内的元素可以根据特定的特征（如窗口宽度、屏幕方向等）自动变化以适应外部容器变化的布局能力。</p><p><img src="/../images/$%7Bfiilename%7D/1749801771473-b1de4694-2e19-4d27-8498-5e383fc765bb.png" alt="img"></p><p>第一种是网格布局：网格布局可以有效的控制需要排版的行和列数，也可设置行列之间的间距</p><p>第二种栅格布局：栅格布局相比于网格布局功能更加强大</p><p>基础写法：<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-gridrow-V5#gutteroption">https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/ts-container-gridrow-V5#gutteroption</a></p><p>网格布局 Grid（网格布局容器） - GridItem（网格布局项）</p><p>栅格布局 GridRow（栅格布局容器） - GridCol（栅格布局项）</p><p><strong>对比:</strong></p><p><strong>1.GridRow 设行列数和间距更简单</strong></p><p><strong>2.GridRow 支执点，响应式布局</strong></p><p><strong>3.GridCol 支持元素排序，所占列数</strong></p><p><img src="/../images/$%7Bfiilename%7D/1749802626783-b94bb36b-2136-4082-8b4c-2015d04ba52d.png" alt="img"></p><h3 id="2-2-1栅格布局（GridRow-GridCol）"><a href="#2-2-1栅格布局（GridRow-GridCol）" class="headerlink" title="2.2.1栅格布局（GridRow&#x2F;GridCol）"></a>2.2.1栅格布局（GridRow&#x2F;GridCol）</h3><h4 id="设置断点（sm-md-lg）"><a href="#设置断点（sm-md-lg）" class="headerlink" title="设置断点（sm md lg）"></a>设置断点（sm md lg）</h4><p><strong>GridRowColumnOption</strong></p><p>栅格在不同宽度设备类型下，栅格列数。</p><p><strong>卡片能力：</strong> 从API version 9开始，该接口支持在ArkTS卡片中使用。</p><p><strong>元服务API：</strong> 从API version 11开始，该接口支持在元服务中使用。</p><p><strong>系统能力：</strong> SystemCapability.ArkUI.ArkUI.Full</p><table><thead><tr><th><strong>名称</strong></th><th><strong>类型</strong></th><th><strong>必填</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>xs</td><td>number</td><td>否</td><td>在栅格大小为xs的设备上，栅格容器组件的栅格列数。</td></tr><tr><td>sm</td><td>number</td><td>否</td><td>在栅格大小为sm的设备上，栅格容器组件的栅格列数。</td></tr><tr><td>md</td><td>number</td><td>否</td><td>在栅格大小为md的设备上，栅格容器组件的栅格列数。</td></tr><tr><td>lg</td><td>number</td><td>否</td><td>在栅格大小为lg的设备上，栅格容器组件的栅格列数。</td></tr><tr><td>xl</td><td>number</td><td>否</td><td>在栅格大小为xl的设备上，栅格容器组件的栅格列数。</td></tr><tr><td>xxl</td><td>number</td><td>否</td><td>在栅格大小为xxl的设备上，栅格容器组件的栅格列数。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      // 栅格布局 - columns的对应属性</span><br><span class="line">      // sm为当当前的设备为小型设备的时候（例如手机）：有2列</span><br><span class="line">      // md为当当前的设备为中型设备的时候（例如折叠屏）：有3列</span><br><span class="line">      // lg为当当前的设备为大型设备的时候（例如平板）：有4列</span><br><span class="line">      GridRow(&#123; columns: &#123; sm: 2, md: 3, lg: 4 &#125;, gutter: &#123; x: 10, y: 10 &#125; &#125;) &#123;</span><br><span class="line">        ForEach(Array.from(&#123; length: 10 &#125;), () =&gt; &#123;</span><br><span class="line">          GridCol() &#123;</span><br><span class="line">            Column() &#123;</span><br><span class="line">              Image($r(&#x27;app.media.ic_video_grid_5&#x27;))</span><br><span class="line">                .width(&#x27;100%&#x27;)</span><br><span class="line">                .aspectRatio(1072 / 616)</span><br><span class="line">                .borderRadius(10)</span><br><span class="line">              Text(&#x27;标题&#x27;)</span><br><span class="line">                .fontSize(14)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1749804982569-0005cec5-5503-4083-8337-9f9cd18218bf.png" alt="img"><img src="/../images/$%7Bfiilename%7D/1749804989881-35d6964f-c504-44d2-9914-3bdfe4945658.png" alt="img"></p><h5 id="监听断点变化"><a href="#监听断点变化" class="headerlink" title="监听断点变化"></a>监听断点变化</h5><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-container-gridrow#onbreakpointchange">https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-container-gridrow#onbreakpointchange</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.onBreakpointChange((breakpoints: string) =&gt; &#123;</span><br><span class="line">  this.breakpoints = breakpoints</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1750173420069-73534d7c-3934-47bb-86e7-bbb6a94cdcd2.png" alt="img"></p><h5 id="控制子元素所占列数"><a href="#控制子元素所占列数" class="headerlink" title="控制子元素所占列数"></a>控制子元素所占列数</h5><p>通过span控制所占列数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  @State breakpoints: string = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      // 栅格布局 - columns的对应属性</span><br><span class="line">      // sm为当当前的设备为小型设备的时候（例如手机）：有2列</span><br><span class="line">      // md为当当前的设备为中型设备的时候（例如折叠屏）：有3列</span><br><span class="line">      // lg为当当前的设备为大型设备的时候（例如平板）：有4列</span><br><span class="line">      GridRow(&#123;</span><br><span class="line">        columns: 12,</span><br><span class="line">        gutter: 10</span><br><span class="line">      &#125;) &#123;</span><br><span class="line">        ForEach(Array.from(&#123; length: 12 &#125;), () =&gt; &#123;</span><br><span class="line">          // 栅格布局 通过span控制所占列数</span><br><span class="line">          GridCol(&#123;</span><br><span class="line">            span: &#123;</span><br><span class="line">              sm: 6,</span><br><span class="line">              md: 4,</span><br><span class="line">              lg: 2</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;) &#123;</span><br><span class="line">            Column() &#123;</span><br><span class="line">              Image($r(&#x27;app.media.ic_video_grid_5&#x27;))</span><br><span class="line">                .width(&#x27;100%&#x27;)</span><br><span class="line">                .aspectRatio(1072 / 616)</span><br><span class="line">                .borderRadius(10)</span><br><span class="line">              Text(&#x27;标题&#x27;)</span><br><span class="line">                .fontSize(14)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .onBreakpointChange((breakpoints: string) =&gt; &#123;</span><br><span class="line">        this.breakpoints = breakpoints</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      Text(&#x27;当前断点&#x27; + this.breakpoints)</span><br><span class="line">        .fontSize(46)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1750177429665-2d2e2d9d-4f86-410f-a8b9-684e65466d18.png" alt="img"></p><h3 id="2-2-2-断点"><a href="#2-2-2-断点" class="headerlink" title="2.2.2 断点"></a>2.2.2 断点</h3><h4 id="2-2-2-1-全局断点"><a href="#2-2-2-1-全局断点" class="headerlink" title="2.2.2.1 全局断点"></a>2.2.2.1 全局断点</h4><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/responsive-layout">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/responsive-layout</a></p><p>核心三步走：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// MainAbility.ts</span><br><span class="line">import &#123; window, display &#125; from &#x27;@kit.ArkUI&#x27;</span><br><span class="line">import &#123; UIAbility &#125; from &#x27;@kit.AbilityKit&#x27;</span><br><span class="line"></span><br><span class="line">export default class MainAbility extends UIAbility &#123;</span><br><span class="line">  private curBp: string = &#x27;&#x27;</span><br><span class="line">  //...</span><br><span class="line">  // 根据当前窗口尺寸更新断点</span><br><span class="line">  private updateBreakpoint(windowWidth: number) :void&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      //  核心代码1: 将长度的单位由px换算为vp，（px除以像素密度得到vp）</span><br><span class="line">      let windowWidthVp = windowWidth / display.getDefaultDisplaySync().densityPixels</span><br><span class="line">      let newBp: string = &#x27;&#x27;</span><br><span class="line">      //  核心代码2: 基于窗口宽度vp值，判断当前设备属于哪个断点范围</span><br><span class="line">      if (windowWidthVp &lt; 320) &#123;</span><br><span class="line">        newBp = &#x27;xs&#x27;</span><br><span class="line">      &#125; else if (windowWidthVp &lt; 600) &#123;</span><br><span class="line">        newBp = &#x27;sm&#x27;</span><br><span class="line">      &#125; else if (windowWidthVp &lt; 840) &#123;</span><br><span class="line">        newBp = &#x27;md&#x27;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        newBp = &#x27;lg&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">      if (this.curBp !== newBp) &#123;</span><br><span class="line">        this.curBp = newBp</span><br><span class="line">        // 核心代码3: 使用状态变量记录当前断点值</span><br><span class="line">        AppStorage.setOrCreate(&#x27;currentBreakpoint&#x27;, this.curBp)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch(err) &#123;</span><br><span class="line">      console.log(&quot;getDisplayByIdSync failed err&quot; + err.code)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onWindowStageCreate(windowStage: window.WindowStage) :void&#123;</span><br><span class="line">    windowStage.getMainWindow().then((windowObj) =&gt; &#123;</span><br><span class="line">      // 获取应用启动时的窗口尺寸</span><br><span class="line">      this.updateBreakpoint(windowObj.getWindowProperties().windowRect.width)</span><br><span class="line">      // 注册回调函数，监听窗口尺寸变化</span><br><span class="line">      windowObj.on(&#x27;windowSizeChange&#x27;, (windowSize)=&gt;&#123;</span><br><span class="line">        this.updateBreakpoint(windowSize.width)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>页面中使用断点信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Demo11_login &#123;</span><br><span class="line">  @StorageProp(&#x27;currentBreakpoint&#x27;) curBp: string = &#x27;sm&#x27;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-2-封装系统工具-BreakPointType"><a href="#2-2-2-2-封装系统工具-BreakPointType" class="headerlink" title="2.2.2.2 封装系统工具-BreakPointType"></a>2.2.2.2 封装系统工具-BreakPointType</h4><p>  封装系统工具-BreakPointType</p><p>  * 1. 如果是 两种的情况：用 三元表达式 即可</p><p>​    2. 如果是 多种的情况：用 三元表达式 就不太方便啦</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// common/breakpointSystem.ets</span><br><span class="line">/*</span><br><span class="line">  封装系统工具-BreakPointType</span><br><span class="line">  * 1. 如果是 两种的情况：用 三元表达式 即可</span><br><span class="line">    2. 如果是 多种的情况：用 三元表达式 就不太方便啦</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">export interface BreakPointTypeOption&lt;T&gt; &#123;</span><br><span class="line">  xs?: T</span><br><span class="line">  sm?: T</span><br><span class="line">  md?: T</span><br><span class="line">  lg?: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export class BreakPointType&lt;T&gt; &#123;</span><br><span class="line">  options: BreakPointTypeOption&lt;T&gt;</span><br><span class="line"></span><br><span class="line">  constructor(option: BreakPointTypeOption&lt;T&gt;) &#123;</span><br><span class="line">    this.options = option</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getValue(currentBreakPoint: string) &#123;</span><br><span class="line">    if (currentBreakPoint === &#x27;xs&#x27;) &#123;</span><br><span class="line">      return this.options.xs</span><br><span class="line">    &#125; else if (currentBreakPoint === &#x27;sm&#x27;) &#123;</span><br><span class="line">      return this.options.sm</span><br><span class="line">    &#125; else if (currentBreakPoint === &#x27;md&#x27;) &#123;</span><br><span class="line">      return this.options.md</span><br><span class="line">    &#125; else if (currentBreakPoint === &#x27;lg&#x27;) &#123;</span><br><span class="line">      return this.options.lg</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return undefined</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 1. 导入BreakPointType</span><br><span class="line">import &#123; BreakPointType &#125; from &#x27;../commons/breakpointSystem&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  // 2. 通过 AppStorage 获取断点值</span><br><span class="line">  @StorageProp(&#x27;currentBreakpoint&#x27;) currentBreakpoint: string = &#x27;sm&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(this.currentBreakpoint)</span><br><span class="line">    &#125;</span><br><span class="line">    .width(200)</span><br><span class="line">    .height(200)</span><br><span class="line">    .backgroundColor(</span><br><span class="line">      // 3. 实例化 设置不同断点的取值，并通过 getValue 根据当前断点值对应的值</span><br><span class="line">      new BreakPointType(&#123;</span><br><span class="line">        xs: Color.Red,</span><br><span class="line">        sm: Color.Yellow,</span><br><span class="line">        md: Color.Blue,</span><br><span class="line">        lg: Color.Green</span><br><span class="line">      &#125;).getValue(this.currentBreakpoint)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1750329618821-2315d1c8-ac93-4c2c-a6b8-b722d1c51a1c.png" alt="img"></p><p><img src="/../images/$%7Bfiilename%7D/1750329637384-bcaaa003-fa3b-4aac-853c-74baaed94092.png" alt="img"></p><h5 id="案例说明："><a href="#案例说明：" class="headerlink" title="案例说明："></a>案例说明：</h5><p>运用了上面封装的工具类进行多种设备的界面适配（例如sm型号为两列 md&#x2F;lg型号为4列）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BreakPointType &#125; from &#x27;../commons/breakpointSystem&#x27;</span><br><span class="line"></span><br><span class="line">interface MovieItem &#123;</span><br><span class="line">  title: string</span><br><span class="line">  img: ResourceStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  items: MovieItem[] = [</span><br><span class="line">    &#123; title: &#x27;电影标题1&#x27;, img: $r(&#x27;app.media.ic_video_grid_1&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题2&#x27;, img: $r(&#x27;app.media.ic_video_grid_2&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题3&#x27;, img: $r(&#x27;app.media.ic_video_grid_3&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题4&#x27;, img: $r(&#x27;app.media.ic_video_grid_4&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题5&#x27;, img: $r(&#x27;app.media.ic_video_grid_5&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题6&#x27;, img: $r(&#x27;app.media.ic_video_grid_6&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题7&#x27;, img: $r(&#x27;app.media.ic_video_grid_7&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题8&#x27;, img: $r(&#x27;app.media.ic_video_grid_8&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题9&#x27;, img: $r(&#x27;app.media.ic_video_grid_9&#x27;) &#125;,</span><br><span class="line">    &#123; title: &#x27;电影标题10&#x27;, img: $r(&#x27;app.media.ic_video_grid_10&#x27;) &#125;,</span><br><span class="line">  ]</span><br><span class="line">  @StorageProp(&#x27;currentBreakpoint&#x27;) currentBreakpoint: string = &#x27;sm&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Grid() &#123;</span><br><span class="line">      ForEach(this.items, (item: MovieItem) =&gt; &#123;</span><br><span class="line">        GridItem() &#123;</span><br><span class="line">          Column(&#123; space: 10 &#125;) &#123;</span><br><span class="line">            Image(item.img)</span><br><span class="line">              .borderRadius(10)</span><br><span class="line">            Text(item.title)</span><br><span class="line">              .width(&#x27;100%&#x27;)</span><br><span class="line">              .fontSize(20)</span><br><span class="line">              .fontWeight(600)</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    .columnsTemplate(new BreakPointType(&#123;</span><br><span class="line">      xs: &#x27;1fr 1fr&#x27;,</span><br><span class="line">      sm: &#x27;1fr 1fr&#x27;,</span><br><span class="line">      md: &#x27;1fr 1fr 1fr&#x27;,</span><br><span class="line">      lg: &#x27;1fr 1fr 1fr 1fr&#x27;</span><br><span class="line">    &#125;).getValue(this.currentBreakpoint)</span><br><span class="line">    )</span><br><span class="line">    .rowsGap(10)</span><br><span class="line">    .columnsGap(10)</span><br><span class="line">    .padding(10)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1750341871092-76a9896f-07bf-467a-9fc2-d97c060459bc.png" alt="img"><img src="/../images/$%7Bfiilename%7D/1750341876551-9aaf451a-fb01-4747-8321-40a2df4f227d.png" alt="img"></p><h3 id="2-2-3-媒体查询"><a href="#2-2-3-媒体查询" class="headerlink" title="2.2.3 媒体查询"></a>2.2.3 媒体查询</h3><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-layout-development-media-query-V5">https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/arkts-layout-development-media-query-V5</a></p><p>核心步骤：创建监听器 - 添加回调函数（当result中的matches值为true时表示匹配成功）此时可以进行变量的赋值操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 媒体查询</span><br><span class="line">import &#123; mediaquery &#125; from &#x27;@kit.ArkUI&#x27;</span><br><span class="line"></span><br><span class="line">// 1. 创建监听器</span><br><span class="line">const listenerXS: mediaquery.MediaQueryListener = mediaquery.matchMediaSync(&#x27;(0vp&lt;=width&lt;320vp)&#x27;);</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Index &#123;</span><br><span class="line">  // 注册监听器</span><br><span class="line">  aboutToAppear(): void &#123;</span><br><span class="line">    // 添加回调函数</span><br><span class="line">    listenerXS.on(&#x27;change&#x27;, (result: mediaquery.MediaQueryResult) =&gt; &#123;</span><br><span class="line">      console.log(&#x27;listenerXS result:&#x27;, JSON.stringify(result))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Text(&#x27;hello world&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1750348510146-8ef61041-2376-4c0a-bede-7037f70c5ed7.png" alt="img"></p><p><strong>listenerXS result: {“matches”:false,”media”:”(0vp&lt;&#x3D;width&lt;320vp)”}</strong></p><p><strong>说明：match进行匹配 - 判断是否符合监听器括号中的条件（因为开的是平板所以输出为false）</strong></p><p><strong>media为输出监听器的条件</strong></p><p><strong>为了提高性能，在界面被销毁时应该移除监听器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aboutToDisappear(): void &#123;</span><br><span class="line">  // 移除监听器</span><br><span class="line">  listenerXS.off(&#x27;change&#x27;)</span><br><span class="line">  listenerSM.off(&#x27;change&#x27;)</span><br><span class="line">  listenerMD.off(&#x27;change&#x27;)</span><br><span class="line">  listenerLG.off(&#x27;change&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-总结概括"><a href="#2-2-4-总结概括" class="headerlink" title="2.2.4 总结概括"></a>2.2.4 总结概括</h3><p><img src="/../images/$%7Bfiilename%7D/1750405507042-c80ed921-7ed4-49f0-a42b-799631ce7c63.png" alt="img"></p><h1 id="三、功能级一多"><a href="#三、功能级一多" class="headerlink" title="三、功能级一多"></a>三、功能级一多</h1><p>不同设备的系统能力有差异，如智能穿戴设备是否具备定位能力、智慧屏是否具备摄像头等，功能如何兼容。</p><p><strong>什么是系统能力</strong></p><p>系统能力（即SystemCapability，缩写为SysCap）指操作系统中每一个相对独立的特性，如蓝牙，WIFI，NFC，摄像头等，都是系统能力之一。每个系统能力对应多个API，随着目标设备是否支持该系统能力共同存在或消失。</p><h2 id="3-1-canIUse判断"><a href="#3-1-canIUse判断" class="headerlink" title="3.1 canIUse判断"></a>3.1 canIUse判断</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (canIUse(&quot;能力集的名字&quot;)) &#123;</span><br><span class="line">  // 正常调用</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // 提示用户</span><br><span class="line">  console.log(&quot;该设备不支持SystemCapability.Communication.NFC.Core&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg1：判断是否具有NFC系统功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 如果某个系统能力没有写入应用的要求能力集中，那么在使用前需要判断设备是否支持该系统能力。</span><br><span class="line">aboutToAppear(): void &#123;</span><br><span class="line">  // 方法1：使用canUse接口判断设备是否支持某系统能力</span><br><span class="line">  // TODO if (canIUse(&quot;能力集的名字&quot;))</span><br><span class="line">  if (canIUse(&quot;SystemCapability.Communication.NFC.Core&quot;)) &#123;</span><br><span class="line">    console.log(&quot;该设备支持SystemCapability.Communication.NFC.Core&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&quot;该设备不支持SystemCapability.Communication.NFC.Core&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg2：display.isFoldable() 这个 api 并不是每个设备都可以使用，在调用之前就可以先判断一下</p><p><img src="/../images/$%7Bfiilename%7D/1750587982873-79826810-f608-4f4b-aeb8-a8e4a34ee185.png" alt="img"></p><p>isFoldable不是所有设备都可以 - 所以会显示高亮效果</p><p>调用canIUse接口判断是否具有该系统功能，可以将鼠标移动至isFoldable处查看如何在canIUse中写系统功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// display.isFoldable()判断设备是否为折叠屏</span><br><span class="line">if (canIUse(&#x27;SystemCapability.Window.SessionManager&#x27;)) &#123;</span><br><span class="line">  display.isFoldable()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/1750587922474-b21cf57b-1fab-4105-9f98-7da4554bacb2.png" alt="img"></p><h1 id="四、工程级一多"><a href="#四、工程级一多" class="headerlink" title="四、工程级一多"></a>四、工程级一多</h1><h2 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h2><p>一多模式下，官方推荐在开发过程中采用”三层工程架构”，其实就是<strong>把项目拆分成不同类型的模块，再通过模块之间的引用组合，最终实现应用功能</strong>，拆分规范如下：</p><ul><li>commons(公共能力层)：用于存放<strong>公共</strong>基础能力合集，比如工具库，公共配置等</li><li>features(基础特性层)：用于存放应用中相对独立的各个功能的<strong>UI</strong>以及业务逻辑实现</li><li>products(产品定制层)：用于针对不同<strong>设备</strong>形态进行功能和特性集成，作为应用入口</li><li><a href="https://developer.huawei.com/consumer/cn/doc/best-practices-V5/bpta-layered-architecture-design-V5">https://developer.huawei.com/consumer/cn/doc/best-practices-V5/bpta-layered-architecture-design-V5</a></li></ul><p><img src="/../images/$%7Bfiilename%7D/1717149305821-e77973cd-8d42-416f-82c6-924946c15dc2.png" alt="img"></p><h2 id="4-2-选择合适的包类型"><a href="#4-2-选择合适的包类型" class="headerlink" title="4.2 选择合适的包类型"></a>4.2 选择合适的包类型</h2><p>HAP、HAR、HSP三者的功能和使用场景总结对比如下：</p><table><thead><tr><th><strong>Module类型</strong></th><th><strong>包类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Ability</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/hap-package-V5">HAP</a></td><td>应用的功能模块，可以独立安装和运行，必须包含一个entry类型的HAP，可选包含一个或多个feature类型的HAP。</td></tr><tr><td>Static Library</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/har-package-V5">HAR</a></td><td>静态共享包，编译态复用。- 支持应用内共享，也可以发布后供其他应用使用。- 作为二方库，发布到<a href="https://ohpm.openharmony.cn/">OHPM</a>私仓，供公司内部其他应用使用。- 作为三方库，发布到<a href="https://ohpm.openharmony.cn/">OHPM</a>中心仓，供其他应用使用。- 多包（HAP&#x2F;HSP）引用相同的HAR时，会造成多包间代码和资源的重复拷贝，从而导致应用包膨大。- 注意：<a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/har-package-V5#%E7%BC%96%E8%AF%91">编译HAR</a>时，建议开启混淆能力，保护代码资产。</td></tr><tr><td>Shared Library</td><td><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/in-app-hsp-V5">HSP</a></td><td>动态共享包，运行时复用。- 当前仅支持应用内共享。- 当多包（HAP&#x2F;HSP）同时引用同一个共享包时，采用HSP替代HAR，可以避免HAR造成的多包间代码和资源的重复拷贝，从而减小应用包大小。</td></tr></tbody></table><p><strong>1&gt; HAP：应用的功能模块，可以独立安装和使用（必须包含一个entry + 可选一个或者多个feature）</strong></p><p><strong>2&gt; HAR：静态共享包，编译时复用（应用内共享，可发布后供其他应用使用）（三方库，公司私仓）</strong></p><p><strong>tip：如果远程仓库下载不下来可以直接在该文件中进行配置：</strong></p><p><img src="/../images/$%7Bfiilename%7D/1750603118657-47dce06d-81f3-44ac-8ea8-6594b7fd8ba7.png" alt="img"></p><p><strong>配置完毕即可查看下载下来的包：</strong></p><p><img src="/../images/$%7Bfiilename%7D/1750603196720-56458b87-7729-4544-b266-7f96e9daf3e9.png" alt="img"></p><p>注意：多包（HAP&#x2F;HSP）引用相同的HAR时，会造成多包间代码和资源的重复拷贝，从而导致应用包膨大。</p><p>建议下载到commons模块，因为features和products都可以进行调用（如果下载到products模块只能在products进行使用，commons或者features模块想要进行使用还需要重新进行下载，导致代码冗余）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙主题设置</title>
      <link href="/2025/05/22/%E9%B8%BF%E8%92%99%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"/>
      <url>/2025/05/22/%E9%B8%BF%E8%92%99%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、创建深色资源目录-文件"><a href="#一、创建深色资源目录-文件" class="headerlink" title="一、创建深色资源目录 + 文件"></a>一、创建深色资源目录 + 文件</h1><h2 id="1-1-创建资源文件"><a href="#1-1-创建资源文件" class="headerlink" title="1.1 创建资源文件"></a>1.1 创建资源文件</h2><p><img src="/../images/$%7Bfiilename%7D/1747837680565-73c4f8da-d944-421e-b332-f975627869c2.png" alt="img"></p><h2 id="1-2-资源文件选择ColorMode类型"><a href="#1-2-资源文件选择ColorMode类型" class="headerlink" title="1.2 资源文件选择ColorMode类型"></a>1.2 资源文件选择ColorMode类型</h2><p><img src="/../images/$%7Bfiilename%7D/1747837780684-bbb30fb5-59f5-4e14-9a97-b2bf7fe3f88b.png" alt="img"></p><h2 id="1-3-在文件下面创建color-json文件用来储存颜色资源"><a href="#1-3-在文件下面创建color-json文件用来储存颜色资源" class="headerlink" title="1.3 在文件下面创建color.json文件用来储存颜色资源"></a>1.3 在文件下面创建color.json文件用来储存颜色资源</h2><p><img src="/../images/$%7Bfiilename%7D/1747837813631-071c81a9-6dbd-4aef-8b91-474318db0d69.png" alt="img"></p><h1 id="二、添加深色资源"><a href="#二、添加深色资源" class="headerlink" title="二、添加深色资源"></a>二、添加深色资源</h1><p><strong>深色模式资源</strong></p><p>目标：根据默认的主题颜色，配置暗色主题的颜色资源</p><p>具体步骤：</p><ul><li>添加暗黑模式下的演示资源, 默认是跟随系统可以测试</li></ul><p>落地代码：</p><p><strong>.亮色模式颜色资源代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;color&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_01&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#979797&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_02&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#848484&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_03&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#666666&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_bg&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#f3f4f5&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_border&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#e8e7ee&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_main_color&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#FA6D1D&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_green&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#41B883&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_blue&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#3266EE&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_blue_bg&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#EDF2FF&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;black&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#131313&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;white&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#ffffff&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;home_gray&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#EDECF2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<strong>暗黑模式下的演示资源</strong> <code>resources/dark/element/color.json</code> 添加以下代码</p><p><img src="/../images/$%7Bfiilename%7D/1747838364366-b9a45c09-0e28-4356-b36e-6f5023e32f8a.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;color&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_01&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#979797&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_02&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#848484&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_03&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#666666&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_bg&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#232323&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_gray_border&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#323232&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_main_color&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#FA6D1D&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_green&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#41B883&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_blue&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#3266EE&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;common_blue_bg&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#EDF2FF&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;black&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#ffffff&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;white&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#131313&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;home_gray&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#b3b3cc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对比分析：</strong></p><p><strong>暗黑模式下：白色</strong></p><p><img src="/../images/$%7Bfiilename%7D/1747838498554-78aa302a-ec99-4b57-96bf-a99d0e855657.png" alt="img"></p><p><strong>亮色模式下：黑色</strong></p><p><img src="/../images/$%7Bfiilename%7D/1747838533255-2d180e7e-35fc-403c-936c-01ce1edb230d.png" alt="img"></p><p><a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references-V5/js-apis-inner-application-applicationcontext-V5#applicationcontextsetcolormode11">ApplicationContext.setColorMode</a></p><p>ApplicationContext与Context之间的区别：</p><p>一个应用里面可能会有多个包 多个UIAbility模块</p><p><img src="/../images/$%7Bfiilename%7D/1747840093962-eae8bb24-055f-41ca-a384-4c4056f49279.png" alt="img"></p><p><img src="/../images/$%7Bfiilename%7D/1747840479882-7daec5c3-7081-4f47-b410-cfb0a3aa8f3a.png" alt="img"></p><ul><li><code>**Context**</code> 属于 <code>**UIAbility**</code> <strong>或</strong> <code>**Page**</code> <strong>层级</strong>，用于处理当前模块内的交互。</li><li><code>**ApplicationContext**</code> 属于 <code>**Module**</code> <strong>之上的应用层级</strong>，用于跨模块通信和全局管理。</li></ul><p><img src="/../images/$%7Bfiilename%7D/1747878043104-3715a187-4efa-4a5a-bd0b-207e19fe3bcd.png" alt="img"></p><p><strong>eg: 设置跟随模式</strong></p><p><strong>在UIAbility中的onCreate()里面设置全局颜色模式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void &#123;</span><br><span class="line">  //this.context.getApplicationContext().setColorMode(ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET);</span><br><span class="line">  //hilog.info(DOMAIN, &#x27;testTag&#x27;, &#x27;%&#123;public&#125;s&#x27;, &#x27;Ability onCreate&#x27;);</span><br><span class="line">  // 获取上下文对象 this.context</span><br><span class="line">  AppStorage.setOrCreate(&#x27;context&#x27;, this.context) // 上下文对象进行存储</span><br><span class="line">  //  获取到应用级上下文 设置颜色模式 --默认是跟随模式</span><br><span class="line">  this.context.getApplicationContext().setColorMode(ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>进入首页初始化主题色</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">initTheme() &#123;</span><br><span class="line">  // 持久化颜色主题，默认值亮色模式</span><br><span class="line">  PersistentStorage.persistProp&lt;ConfigurationConstant.ColorMode&gt;(ColorModeKey,</span><br><span class="line">    ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT)</span><br><span class="line">  // 取出现在应用存储的颜色主题模式</span><br><span class="line">  const colorMode = AppStorage.get&lt;ConfigurationConstant.ColorMode&gt;(ColorModeKey)</span><br><span class="line">  // 设置应用颜色主题模式</span><br><span class="line">  this.setTheme(colorMode!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主题是否每次被重置为亮色模式</strong></p><ul><li><strong>否。</strong><code>**persistProp**</code> 的<strong>默认值</strong>仅在 <strong>首次初始化时生效</strong>，后续会优先读取持久化存储中的值（用户可能已修改过主题）。</li><li><strong>逻辑流程</strong>：</li></ul><p><img src="/../images/$%7Bfiilename%7D/1747881966512-c348861d-ab1e-4748-92b3-d4abe48954f5.png" alt="img"></p><p><strong>Appstorage的setOrCreate与set之间的区别</strong></p><p>1&gt; <strong>setOrCreate主要是为了设置没有初始值的数据</strong></p><p><strong>2&gt; set为了设置有初始值 -&gt; 发生变化的数据</strong></p><p><strong>由于PersistentStorage.persistProp&lt;ConfigurationConstant.ColorMode&gt;(ColorModeKey,</strong></p><p>​      <strong>ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT)</strong></p><p><strong>所以必有初始值，没有必要使用setOrCreate</strong></p><h1 id="三、设置改变主题颜色工具类"><a href="#三、设置改变主题颜色工具类" class="headerlink" title="三、设置改变主题颜色工具类"></a>三、设置改变主题颜色工具类</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ConfigurationConstant, Context &#125; from &quot;@kit.AbilityKit&quot;;</span><br><span class="line"></span><br><span class="line">export const ColorModeKey = &#x27;hc-color-mode&#x27;</span><br><span class="line"></span><br><span class="line">class Theme &#123;</span><br><span class="line">  // 持久化颜色主题 默认是亮色模式</span><br><span class="line">  initTheme() &#123;</span><br><span class="line">    // 持久化存储数据</span><br><span class="line">    PersistentStorage.persistProp&lt;ConfigurationConstant.ColorMode&gt;(ColorModeKey,</span><br><span class="line">      ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT)</span><br><span class="line">    const colorMode = AppStorage.get&lt;ConfigurationConstant.ColorMode&gt;(ColorModeKey)</span><br><span class="line">    this.setTheme(colorMode!)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 设置颜色模式 -- 深色颜色模式 高亮颜色模式 跟随颜色模式</span><br><span class="line">  setTheme(mode: ConfigurationConstant.ColorMode) &#123;</span><br><span class="line">    // 设置主题颜色</span><br><span class="line">    AppStorage.set&lt;ConfigurationConstant.ColorMode&gt;(ColorModeKey, mode)</span><br><span class="line">    const ctx = AppStorage.get&lt;Context&gt;(&#x27;context&#x27;)</span><br><span class="line">    // ctx上下文对象可能为空 所以需要使用到可选链操作符</span><br><span class="line">    ctx?.getApplicationContext().setColorMode(mode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 跟随系统</span><br><span class="line">  notSet() &#123;</span><br><span class="line">    this.setTheme(ConfigurationConstant.ColorMode.COLOR_MODE_NOT_SET)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 暗色</span><br><span class="line">  setDark() &#123;</span><br><span class="line">    this.setTheme(ConfigurationConstant.ColorMode.COLOR_MODE_DARK)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 亮色</span><br><span class="line">  setLight() &#123;</span><br><span class="line">    this.setTheme(ConfigurationConstant.ColorMode.COLOR_MODE_LIGHT)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const theme = new Theme()</span><br></pre></td></tr></table></figure><h1 id="四、界面设计"><a href="#四、界面设计" class="headerlink" title="四、界面设计"></a>四、界面设计</h1><p><img src="/../images/$%7Bfiilename%7D/1747883559057-cedeea05-f07a-4dbd-9dd1-aeba5ade617b.png" alt="img"></p><p><strong>自定义弹窗工具设计</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">@CustomDialog</span><br><span class="line">export struct SettingsThemeDialog &#123;</span><br><span class="line">  controller: CustomDialogController</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Row() &#123;</span><br><span class="line">        Column(&#123; space: 4 &#125;) &#123;</span><br><span class="line">          Text(&#x27;跟随系统&#x27;)</span><br><span class="line">          Text(&#x27;开启后，将跟随系统打开或关闭深色模式&#x27;)</span><br><span class="line">            .fontSize(12)</span><br><span class="line">            .fontColor($r(&#x27;app.color.common_gray_01&#x27;))</span><br><span class="line">        &#125;</span><br><span class="line">        .alignItems(HorizontalAlign.Start)</span><br><span class="line"></span><br><span class="line">        Toggle(&#123;</span><br><span class="line">          type: ToggleType.Switch,</span><br><span class="line">          isOn: true</span><br><span class="line">        &#125;)</span><br><span class="line">          .onChange((val) =&gt; &#123;</span><br><span class="line">            if (val) &#123;</span><br><span class="line">              // TODO 跟随系统</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              // TODO 默认亮色</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .height(70)</span><br><span class="line">      .justifyContent(FlexAlign.SpaceBetween)</span><br><span class="line">      .border(&#123; width: &#123; bottom: 0.5 &#125;, color: $r(&#x27;app.color.common_gray_border&#x27;) &#125;)</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;普通模式&#x27;)</span><br><span class="line">          .fontSize(15)</span><br><span class="line">        Blank()</span><br><span class="line">        Image($r(&#x27;app.media.ic_public_ok&#x27;))</span><br><span class="line">          .width(16)</span><br><span class="line">          .aspectRatio(1)</span><br><span class="line">          .fillColor($r(&#x27;app.color.common_green&#x27;))</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .height(50)</span><br><span class="line">      .border(&#123; width: &#123; bottom: 0.5 &#125;, color: $r(&#x27;app.color.common_gray_border&#x27;) &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;深色模式&#x27;)</span><br><span class="line">          .fontSize(15)</span><br><span class="line">        Blank()</span><br><span class="line">        Image($r(&#x27;app.media.ic_public_ok&#x27;))</span><br><span class="line">          .width(16)</span><br><span class="line">          .aspectRatio(1)</span><br><span class="line">          .fillColor($r(&#x27;app.color.common_green&#x27;))</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .height(50)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .padding(&#123;</span><br><span class="line">      top: 15,</span><br><span class="line">      bottom: 15,</span><br><span class="line">      left: 30,</span><br><span class="line">      right: 30</span><br><span class="line">    &#125;)</span><br><span class="line">    .backgroundColor($r(&#x27;app.color.white&#x27;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>下厨房</title>
      <link href="/2025/02/10/%E4%B8%8B%E5%8E%A8%E6%88%BF/"/>
      <url>/2025/02/10/%E4%B8%8B%E5%8E%A8%E6%88%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/$%7Bfiilename%7D/%E9%A6%96%E9%A1%B5.png" alt="首页"></p><p><em><strong>*核心步骤：*</strong></em></p><ol><li><p>首页：</p><p>绑定点击事件</p></li></ol><p>​       点击时跳转页面，并携带数据</p><p>​       携带的内容结合 【详情页】确认</p><ol start="2"><li>详情页：</li></ol><p>​       接收数据</p><p>​       渲染对应页面结构</p><p>利用router可实现页面间的跳转</p><p><img src="/../images/$%7Bfiilename%7D/%E8%B7%B3%E8%BD%AC.png" alt="跳转"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// -----------传递参数------------</span><br><span class="line">// 普通跳转 并 传递参数</span><br><span class="line">router.pushUrl(&#123;</span><br><span class="line">  url:&#x27;地址&#x27;,</span><br><span class="line">  params:&#123;</span><br><span class="line">    // 以对象的形式传递参数</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 返回并传递参数</span><br><span class="line">router.back(</span><br><span class="line">  url:&#x27;地址&#x27;,</span><br><span class="line">  params:&#123;</span><br><span class="line">    // 以对象的形式传递参数</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// -------------页面 B接收并解析参数------------</span><br><span class="line">// aboutToAppear一会展开 （生命周期函数）</span><br><span class="line">aboutToAppear(): void &#123;</span><br><span class="line">  // 1.确认内容</span><br><span class="line">  console.log(JSON.stringify(router.getParams())) </span><br><span class="line">  // 2.通过 as 类型断言 转为具体的类型</span><br><span class="line">  const params =  router.getParams() as 类型</span><br><span class="line">  // 3. 通过点语法即可取值</span><br><span class="line">  params.xxx </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/router.png" alt="router"></p><h3 id="下厨房首页"><a href="#下厨房首页" class="headerlink" title="下厨房首页"></a><strong>下厨房首页</strong></h3><p><img src="/../images/$%7Bfiilename%7D/%E9%A6%96%E9%A1%B5-1753946200933-4.png" alt="首页"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Category, CategoryContainer &#125; from &#x27;..//data/CategoryData&#x27;</span><br><span class="line">import &#123; router &#125; from &#x27;@kit.ArkUI&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct XCFDemo &#123;</span><br><span class="line">  @State list: CategoryContainer[] = CategoryContainer.getCategoryContainerList()</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      // 顶部</span><br><span class="line">      TopCom()</span><br><span class="line">      // 内容</span><br><span class="line">      ContentCom(&#123;list:this.list&#125;)</span><br><span class="line">        .layoutWeight(1)</span><br><span class="line"></span><br><span class="line">      // 底部</span><br><span class="line">      BottomCom()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 顶部组件：图片代替</span><br><span class="line">@Component</span><br><span class="line">struct TopCom &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line">    Image($r(&#x27;app.media.ic_public_XCF_TOP&#x27;))</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 内容组件：渲染列表</span><br><span class="line">@Component</span><br><span class="line">struct ContentCom &#123;</span><br><span class="line">  @Prop list:CategoryContainer[]</span><br><span class="line">  build() &#123;</span><br><span class="line">    Scroll() &#123;</span><br><span class="line">      Column(&#123; space: 30 &#125;) &#123;</span><br><span class="line">        ForEach(this.list, (item: CategoryContainer) =&gt; &#123;</span><br><span class="line">          Column(&#123; space: 15 &#125;) &#123;</span><br><span class="line">            Text(item.title)</span><br><span class="line">              .fontSize(20)</span><br><span class="line">              .alignSelf(ItemAlign.Start)</span><br><span class="line">              .fontWeight(FontWeight.Medium)</span><br><span class="line">            Grid() &#123;</span><br><span class="line">              ForEach(item.categorizes, (cateItem: Category) =&gt; &#123;</span><br><span class="line">                GridItem() &#123;</span><br><span class="line">                  Stack(&#123; alignContent: Alignment.Bottom &#125;) &#123;</span><br><span class="line">                    Image(cateItem.cover)</span><br><span class="line">                    Text(cateItem.title)</span><br><span class="line">                      .fontColor(Color.White)</span><br><span class="line">                      .fontSize(14)</span><br><span class="line">                      .padding(&#123; bottom: 10 &#125;)</span><br><span class="line">                  &#125;</span><br><span class="line">                  .borderRadius(10)</span><br><span class="line">                  .clip(true)</span><br><span class="line">                  .onClick(()=&gt;&#123;</span><br><span class="line">                    router.pushUrl(&#123;</span><br><span class="line">                      //写/有提示</span><br><span class="line">                      url:&#x27;pages/XCFDetailPage&#x27;,</span><br><span class="line">                      params:&#123;</span><br><span class="line">                        title:cateItem.title,</span><br><span class="line">                        id:cateItem.id</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            .columnsTemplate(&#x27;1fr 1fr 1fr&#x27;)</span><br><span class="line">            .columnsGap(10)</span><br><span class="line">            .rowsGap(10)</span><br><span class="line">          &#125;</span><br><span class="line">          .height(240)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .padding(20)</span><br><span class="line">    &#125;</span><br><span class="line">    .scrollBar(BarState.Off)</span><br><span class="line">    .edgeEffect(EdgeEffect.Spring)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 底部组件：图片代替</span><br><span class="line">@Component</span><br><span class="line">struct BottomCom &#123;</span><br><span class="line">  build() &#123;</span><br><span class="line">    Image($r(&#x27;app.media.ic_public_XCF_Bottom&#x27;))</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下厨房详情页"><a href="#下厨房详情页" class="headerlink" title="下厨房详情页"></a>下厨房详情页</h3><p><img src="/../images/$%7Bfiilename%7D/%E8%B7%B3%E8%BD%AC-1753946244653-6.png" alt="跳转"></p><p><img src="/../images/$%7Bfiilename%7D/%E8%B7%B3%E8%BD%AC%E9%A1%B51-1753946258913-8.png" alt="跳转页1"><img src="/../images/$%7Bfiilename%7D/%E8%B7%B3%E8%BD%AC%E9%A1%B52.png" alt="跳转页2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Food, FoodList &#125; from &#x27;../data/FoodData&#x27;;</span><br><span class="line">import &#123; router &#125; from &#x27;@kit.ArkUI&#x27;;</span><br><span class="line"></span><br><span class="line">interface ParamType &#123;</span><br><span class="line">  title: string</span><br><span class="line">  id: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct CategoryPage &#123;</span><br><span class="line">  // 渲染食物列表</span><br><span class="line">  foods: Food[] = []</span><br><span class="line">  @State cover: string = &#x27;&#x27; //图片素材</span><br><span class="line">  @State cateTitle: string = &#x27;&#x27;</span><br><span class="line">  @State arr: Food[] = [] //筛选出来的食物清单</span><br><span class="line"></span><br><span class="line">  aboutToAppear(): void &#123;</span><br><span class="line">    // 接收路由传递而来的数据</span><br><span class="line">    // console.log(JSON.stringify(router.getParams()))</span><br><span class="line">    const Params = router.getParams() as ParamType</span><br><span class="line">    const arr = FoodList.filter((item: Food) =&gt; &#123;</span><br><span class="line">      if (item.categoryId == Params.id) &#123;</span><br><span class="line">        return true</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //console.log(&#x27;&#x27;,JSON.stringify(arr))</span><br><span class="line">    this.cover = arr[0].cover // 找到素材中第一个图片</span><br><span class="line">    //console.log(this.cover)</span><br><span class="line">    this.cateTitle = Params.title</span><br><span class="line"></span><br><span class="line">    this.arr = arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      // 顶部</span><br><span class="line">      TopCom(&#123; cover: this.cover, cateTitle: this.cateTitle &#125;)</span><br><span class="line"></span><br><span class="line">      // 列表</span><br><span class="line">      List(&#123; space: 20 &#125;) &#123;</span><br><span class="line">        ForEach(this.arr, (food: Food) =&gt; &#123;</span><br><span class="line">          ListItem() &#123;</span><br><span class="line">            Row() &#123;</span><br><span class="line">              Image(food.cover)</span><br><span class="line">                .width(150)</span><br><span class="line">                .height(110)</span><br><span class="line">                .borderRadius(10)</span><br><span class="line">              Column() &#123;</span><br><span class="line">                Text(food.title)</span><br><span class="line">                Text() &#123;</span><br><span class="line">                  Span(`评分:$&#123;food.score&#125;    `)</span><br><span class="line">                  Span(`$&#123;food.count&#125; 人做过`)</span><br><span class="line">                &#125;</span><br><span class="line">                .fontSize(12)</span><br><span class="line"></span><br><span class="line">                Row(&#123; space: 10 &#125;) &#123;</span><br><span class="line">                  // 作者头像</span><br><span class="line">                  Image(food.author.avatar)</span><br><span class="line">                    .width(20)</span><br><span class="line">                    .height(20)</span><br><span class="line">                    .borderRadius(10)</span><br><span class="line">                  // 作者昵称</span><br><span class="line">                  Text(food.author.nickname)</span><br><span class="line">                    .fontSize(10)</span><br><span class="line">                    .fontColor(Color.Gray)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              .alignItems(HorizontalAlign.Start)</span><br><span class="line">              .justifyContent(FlexAlign.SpaceBetween)</span><br><span class="line">              .layoutWeight(1)</span><br><span class="line">              .padding(&#123; top: 5, bottom: 5, left: 10 &#125;)</span><br><span class="line">              .height(110)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .padding(20)</span><br><span class="line">      .layoutWeight(1)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">struct TopCom &#123;</span><br><span class="line">  @Prop cover: string</span><br><span class="line">  @Prop cateTitle: string</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Stack() &#123;</span><br><span class="line">      // 顶部封面</span><br><span class="line">      Image(this.cover)</span><br><span class="line">        .height(&#x27;100%&#x27;)</span><br><span class="line">        .width(&#x27;100%&#x27;)</span><br><span class="line">      Column() &#123;</span><br><span class="line">        // 返回按钮</span><br><span class="line">        Image($r(&#x27;app.media.ic_public_arrow_left&#x27;))</span><br><span class="line">          .fillColor(Color.White)</span><br><span class="line">          .width(30)</span><br><span class="line">          .onClick(() =&gt; &#123;</span><br><span class="line">            router.back()</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">        // 顶部标题</span><br><span class="line">        Text(this.cateTitle)</span><br><span class="line">          .fontColor(Color.White)</span><br><span class="line">          .fontSize(30)</span><br><span class="line">      &#125;</span><br><span class="line">      .justifyContent(FlexAlign.SpaceAround)</span><br><span class="line">      .alignItems(HorizontalAlign.Start)</span><br><span class="line">      .padding(20)</span><br><span class="line">      .backgroundColor(&#x27;rgba(0,0,0,0.4)&#x27;)</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .height(&#x27;100%&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(220)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Promise链式编程</title>
      <link href="/2025/02/06/Promise%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2025/02/06/Promise%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="省市区获取"><a href="#省市区获取" class="headerlink" title="省市区获取"></a>省市区获取</h2><h2 id="运用知识点"><a href="#运用知识点" class="headerlink" title="~~运用知识点"></a>~~运用知识点</h2><p>Promise async await</p><p>Promise是一种用于处理异步操作的对象，可以将异步操作转换为类似于同步操作的风格，以方便代码编写和维护</p><p>**简而言之：**Promise 用来管理异步，方便编码</p><ol><li>处理异步操作成功与失败</li><li>能够解决回调函数地狱</li></ol><h2 id="一、回调函数地狱"><a href="#一、回调函数地狱" class="headerlink" title="一、回调函数地狱"></a>一、回调函数地狱</h2><p>如果回调函数一直【嵌套】下去，代码的可读性会非常糟糕</p><p>一般在多个异步操作【彼此依赖】的时候会出现回调函数嵌套的情况，（c 依赖 b，b 依赖 a），比如：</p><p><img src="/../images/$%7Bfiilename%7D/%E7%9C%81%E4%BB%BD.png" alt="省份"></p><ol><li>获取所有省份</li><li>获取第一个省的所有城市</li><li>获取第一个城市的所有地区</li></ol><p>这里的数据来源于 3 个接口，【地区】 依赖于 【城市】 、【城市】 依赖于【 省】，所以代码写起来会是这样的结果（较为繁琐复杂）</p><p><img src="/../images/$%7Bfiilename%7D/%E5%8C%97%E4%BA%AC%E5%B8%821.png" alt="北京市1"></p><p><strong>这段代码主要为获取北京的地区（这段代码回调函数会一直嵌套下去，可读性差）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import http from &#x27;@ohos.net.http&#x27;</span><br><span class="line"></span><br><span class="line">const req = http.createHttp()</span><br><span class="line"></span><br><span class="line">interface Province &#123;</span><br><span class="line">  message: string</span><br><span class="line">  list: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct TextPickerExample &#123;</span><br><span class="line">  @State apfruits: string[] = []</span><br><span class="line">  orfruits: string[] = [&#x27;orange1&#x27;, &#x27;orange2&#x27;, &#x27;orange3&#x27;, &#x27;orange4&#x27;]</span><br><span class="line">  pefruits: string[] = [&#x27;peach1&#x27;, &#x27;peach2&#x27;, &#x27;peach3&#x27;, &#x27;peach4&#x27;]</span><br><span class="line">  @State multi: string[][] = [this.apfruits, this.orfruits, this.pefruits]</span><br><span class="line"></span><br><span class="line">  aboutToAppear(): void &#123;</span><br><span class="line">    req.request(&#x27;https://hmajax.itheima.net/api/province&#x27;)</span><br><span class="line">      .then(res =&gt; &#123;</span><br><span class="line">        const result = JSON.parse(res.result.toString()) as Province</span><br><span class="line">        //this.apfruits = result.list</span><br><span class="line">        // 获取省份信息</span><br><span class="line">        this.multi[0] = result.list</span><br><span class="line">        // 获取一个省份的城市信息</span><br><span class="line">        req.request(&#x27;https://hmajax.itheima.net/api/city?pname=&#x27; + encodeURIComponent(this.multi[0][0]))</span><br><span class="line">          .then(res =&gt; &#123;</span><br><span class="line">            const result = JSON.parse(res.result.toString()) as Province</span><br><span class="line">            this.multi[1] = result.list</span><br><span class="line">            req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(this.multi[0][0])&#125;&amp;cname=$&#123;encodeURIComponent(this.multi[1][0])&#125;`)</span><br><span class="line">              .then(res =&gt; &#123;</span><br><span class="line">                const result = JSON.parse(res.result.toString()) as Province</span><br><span class="line">                this.multi[2] = result.list</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      TextPicker(&#123; range: this.multi &#125;).canLoop(false)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、链式编程-基本使用"><a href="#二、链式编程-基本使用" class="headerlink" title="二、链式编程-基本使用"></a>二、链式编程-基本使用</h2><p>我们可以通过 Promise 的链式编程来解决这个问题（<strong>Promise 的 then 方法会返回一个新Promise 对象</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">promise对象1.then(res1=&gt;&#123;</span><br><span class="line">  promise对象2.then(res2=&gt;&#123;</span><br><span class="line">    promise对象3.then(res3=&gt;&#123;</span><br><span class="line">      promise对象4.then(res4=&gt;&#123;</span><br><span class="line">        //.... 可以一直写下去</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/%E5%8C%97%E4%BA%AC%E5%B8%821-1753946452460-3.png" alt="北京市1"></p><p><strong>上面代码aboutToAppear修改为Promise链式编程代码可读性就会提升很多</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">aboutToAppear(): void &#123;</span><br><span class="line">  req.request(&#x27;https://hmajax.itheima.net/api/province&#x27;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">      const result = JSON.parse(res.result.toString()) as Province</span><br><span class="line">      // 获取省份信息</span><br><span class="line">      this.multi[0] = result.list</span><br><span class="line">      return req.request(&#x27;https://hmajax.itheima.net/api/city?pname=&#x27; + encodeURIComponent(this.multi[0][0]))</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">      const result = JSON.parse(res.result.toString()) as Province</span><br><span class="line">      this.multi[1] = result.list</span><br><span class="line">      return req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(this.multi[0][0])&#125;&amp;cname=$&#123;encodeURIComponent(this.multi[1][0])&#125;`)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">      const result = JSON.parse(res.result.toString()) as Province</span><br><span class="line">      this.multi[2] = result.list</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/%E6%AF%94%E8%BE%83.png" alt="比较"></p><p><strong>第二个aboutToAppear为修改为Promise链式编程代码的代码</strong></p><h2 id="三、async-await-完成省市区获取"><a href="#三、async-await-完成省市区获取" class="headerlink" title="三、async await 完成省市区获取"></a>三、async await 完成省市区获取</h2><p>Promise 虽然不用嵌套了，但是依旧有回调函数，可以用 async 函数进一步优化</p><p>核心步骤：</p><ol><li>async 修饰函数</li><li>await 等待成功（Promise 对象）</li></ol><p>基本用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async function func() &#123;</span><br><span class="line">  // await 获取到的是 之后 Promise 对象的成功结果</span><br><span class="line">  const res1 = await Promise对象1</span><br><span class="line">  const res2 = await Promise对象2</span><br><span class="line">  const res3 = await Promise对象3</span><br><span class="line">&#125;</span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p><img src="/../images/$%7Bfiilename%7D/await%E7%9C%81%E4%BB%BD.png" alt="await省份"></p><h3 id="进一步优化代码"><a href="#进一步优化代码" class="headerlink" title="进一步优化代码"></a>进一步优化代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">import http from &#x27;@ohos.net.http&#x27;;</span><br><span class="line"></span><br><span class="line">interface IResponse &#123;</span><br><span class="line">  message: string</span><br><span class="line">  list: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Day03_06_AreaChange &#123;</span><br><span class="line">  @State message: string = &#x27;居住地选择&#x27;;</span><br><span class="line">  @State range: string[][] = [[&#x27;北京&#x27;], [&#x27;北京市&#x27;], [&#x27;东城区&#x27;]]</span><br><span class="line">  @State selected: number[] = [0, 0, 0]</span><br><span class="line">  // 这部分信息的目的是渲染到页面上</span><br><span class="line">  @State values: string[] = [&#x27;北京&#x27;, &#x27;北京市&#x27;, &#x27;东城区&#x27;]</span><br><span class="line">  // 请求对象</span><br><span class="line">  req: http.HttpRequest = http.createHttp()</span><br><span class="line">  @State showSheet: boolean = false</span><br><span class="line"></span><br><span class="line">  async aboutToAppear() &#123;</span><br><span class="line">    const Province_Res = await this.req.request(&#x27;https://hmajax.itheima.net/api/province&#x27;)</span><br><span class="line">    const result_Pro = JSON.parse(Province_Res.result.toString()) as IResponse</span><br><span class="line">    // 获取省份信息</span><br><span class="line">    this.range[0] = result_Pro.list</span><br><span class="line"></span><br><span class="line">    const city_Res =</span><br><span class="line">      await this.req.request(&#x27;https://hmajax.itheima.net/api/city?pname=&#x27; + encodeURIComponent(this.range[0][0]))</span><br><span class="line">    const result_City = JSON.parse(city_Res.result.toString()) as IResponse</span><br><span class="line">    // 获取省份信息</span><br><span class="line">    this.range[1] = result_City.list</span><br><span class="line"></span><br><span class="line">    const area_Res =</span><br><span class="line">      await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(this.range[0][0])&#125;&amp;cname=$&#123;encodeURIComponent(this.range[1][0])&#125;`)</span><br><span class="line">    const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">    this.range[2] = result_Area.list</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column(&#123; space: 10 &#125;) &#123;</span><br><span class="line">      // 标题</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(30)</span><br><span class="line">        .fontWeight(FontWeight.Bold)</span><br><span class="line">        .textAlign(TextAlign.Center)</span><br><span class="line">        .width(&#x27;100%&#x27;)</span><br><span class="line">        .margin(&#123; bottom: 20 &#125;)</span><br><span class="line">      //</span><br><span class="line">      Row(&#123; space: 10 &#125;) &#123;</span><br><span class="line">        Text(&#x27;居住地:&#x27;)</span><br><span class="line">          .fontWeight(FontWeight.Bold)</span><br><span class="line">        Text(this.values.join(&#x27;/&#x27;))</span><br><span class="line">          .layoutWeight(1)</span><br><span class="line">          .fontColor(Color.Gray)</span><br><span class="line">          .onClick(() =&gt; &#123;</span><br><span class="line">            this.showSheet = true</span><br><span class="line">          &#125;)</span><br><span class="line">        Image($r(&#x27;app.media.ic_public_arrow_right&#x27;))</span><br><span class="line">          .width(20)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Divider()</span><br><span class="line">      Blank()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .alignItems(HorizontalAlign.Start)</span><br><span class="line">    .padding(20)</span><br><span class="line">    .bindSheet($$this.showSheet, this.areaSheet(), &#123;</span><br><span class="line">      height: 300</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Builder</span><br><span class="line">  areaSheet() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      TextPicker(&#123;</span><br><span class="line">        range: this.range,</span><br><span class="line">        selected: $$this.selected,</span><br><span class="line">        // value: $$this.values //</span><br><span class="line">      &#125;)</span><br><span class="line">        .canLoop(false)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一种情况：改变省份信息"><a href="#第一种情况：改变省份信息" class="headerlink" title="第一种情况：改变省份信息"></a>第一种情况：改变省份信息</h3><p><strong>利用TextPicker的onChange事件（当用户滑动时改变数据触发）</strong></p><p><strong>这段代码考虑第一种情况：用户改变省份信息（即滑动第一列）此时需要根据用户挑选的省重新进行网络请求获取对应的城市以及地区，同时城市及地区需要指向每列第一个（上段代码中定义了一个状态变量selected与TextPicker进行双向绑定 表示指向第几个省份，城市，地区）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">   接上段代码areaSheet部分</span><br><span class="line">   </span><br><span class="line">  @Builder</span><br><span class="line">  areaSheet() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      TextPicker(&#123;</span><br><span class="line">        range: this.range,</span><br><span class="line">        selected: $$this.selected,</span><br><span class="line">        // value: $$this.values //</span><br><span class="line">      &#125;)</span><br><span class="line">        .canLoop(false)</span><br><span class="line">        .onChange(async (value, index) =&gt; &#123;</span><br><span class="line">          // 改变省份</span><br><span class="line">          if (this.values[0] != value[0]) &#123;</span><br><span class="line">            // 1. 刷新省份</span><br><span class="line">            const Province_Res = value[0]</span><br><span class="line">            // 省份赋值</span><br><span class="line">            this.values[0] = value[0]</span><br><span class="line"></span><br><span class="line">            const city_Res =</span><br><span class="line">              await this.req.request(&#x27;https://hmajax.itheima.net/api/city?pname=&#x27; + encodeURIComponent(Province_Res))</span><br><span class="line">            const result_City = JSON.parse(city_Res.result.toString()) as IResponse</span><br><span class="line">            // 获取省份信息</span><br><span class="line">            this.range[1] = result_City.list</span><br><span class="line">            // 将城市指向到第一个</span><br><span class="line">            this.selected[1] = 0</span><br><span class="line">            // 赋值城市信息</span><br><span class="line">            this.values[1] = this.range[1][0]</span><br><span class="line"></span><br><span class="line">            // 查询地区信息</span><br><span class="line">            const cname = this.range[1][0]</span><br><span class="line">            const area_Res =</span><br><span class="line">              await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(Province_Res)&#125;&amp;cname=$&#123;encodeURIComponent(cname)&#125;`)</span><br><span class="line">            const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">            this.range[2] = result_Area.list</span><br><span class="line">            // 将地区指向到第一个</span><br><span class="line">            this.selected[2] = 0</span><br><span class="line">            // 赋值地区</span><br><span class="line">            this.values[2] = this.range[2][0]</span><br><span class="line">          &#125;</span><br><span class="line">          // console.log(&#x27;这次&#x27; + value + &#x27;上次&#x27; + this.values[0]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种情况：改变市"><a href="#第二种情况：改变市" class="headerlink" title="第二种情况：改变市"></a>第二种情况：改变市</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 第二种情况 改变市</span><br><span class="line">           if (this.values[1] != value[1]) &#123;</span><br><span class="line">             // 保存最新选中的市 避免重复触发</span><br><span class="line">             this.values[1] = value[1]</span><br><span class="line">             // 查询地区信息</span><br><span class="line">             const cname = value[1]</span><br><span class="line">             const area_Res =</span><br><span class="line">               await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(value[0])&#125;&amp;cname=$&#123;encodeURIComponent(cname)&#125;`)</span><br><span class="line">             const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">             this.range[2] = result_Area.list</span><br><span class="line">             // 将地区指向到第一个</span><br><span class="line">             this.selected[2] = 0</span><br><span class="line">             // 赋值地区</span><br><span class="line">             this.values[2] = this.range[2][0]</span><br><span class="line">             return</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h3 id="第三种情况：改变地区"><a href="#第三种情况：改变地区" class="headerlink" title="第三种情况：改变地区"></a>第三种情况：改变地区</h3><p>直接赋值到状态变量value即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 第三种 改变区</span><br><span class="line">if (this.values[2] != value[2]) &#123;</span><br><span class="line">  // 直接赋值value即可</span><br><span class="line">  this.values[2] = value[2]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题：函数防抖"><a href="#问题：函数防抖" class="headerlink" title="问题：函数防抖"></a>问题：函数防抖</h3><p><img src="/../images/$%7Bfiilename%7D/%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96.png" alt="函数防抖"></p><p>常见的性能优化方案 , 它可以防止高频渲染页面时出现的视觉抖动(卡顿)</p><p><strong>为解决该问题可以设定一个定时器，如果用户在一定时间内不操作则执行逻辑（连续事件停止触发后，一段时间内如果没有再次触发，就执行业务代码）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">@Builder</span><br><span class="line">  areaSheet() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      TextPicker(&#123;</span><br><span class="line">        range: this.range,</span><br><span class="line">        selected: $$this.selected,</span><br><span class="line">        // value: $$this.values //</span><br><span class="line">      &#125;)</span><br><span class="line">        .canLoop(false)</span><br><span class="line">        .onChange(async (value, index) =&gt; &#123;</span><br><span class="line">          // 清除上一次timeID</span><br><span class="line">          clearTimeout(this.timeID)</span><br><span class="line">          // 改变省份</span><br><span class="line">          // 函数防抖</span><br><span class="line">          this.timeID = setTimeout(async () =&gt; &#123;</span><br><span class="line">            // 第一种情况 改变省份：市区都需要重新获取并还原到每列第一个</span><br><span class="line">            if (this.values[0] != value[0]) &#123;</span><br><span class="line">              // 1. 刷新省份</span><br><span class="line">              const Province_Res = value[0]</span><br><span class="line">              // 省份赋值</span><br><span class="line">              this.values[0] = value[0]</span><br><span class="line"></span><br><span class="line">              const city_Res =</span><br><span class="line">                await this.req.request(&#x27;https://hmajax.itheima.net/api/city?pname=&#x27; + encodeURIComponent(Province_Res))</span><br><span class="line">              const result_City = JSON.parse(city_Res.result.toString()) as IResponse</span><br><span class="line">              // 获取省份信息</span><br><span class="line">              this.range[1] = result_City.list</span><br><span class="line">              // 将城市指向到第一个</span><br><span class="line">              this.selected[1] = 0</span><br><span class="line">              // 赋值城市信息</span><br><span class="line">              this.values[1] = this.range[1][0]</span><br><span class="line"></span><br><span class="line">              // 查询地区信息</span><br><span class="line">              const cname = this.range[1][0]</span><br><span class="line">              const area_Res =</span><br><span class="line">                await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(Province_Res)&#125;&amp;cname=$&#123;encodeURIComponent(cname)&#125;`)</span><br><span class="line">              const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">              this.range[2] = result_Area.list</span><br><span class="line">              // 将地区指向到第一个</span><br><span class="line">              this.selected[2] = 0</span><br><span class="line">              // 赋值地区</span><br><span class="line">              this.values[2] = this.range[2][0]</span><br><span class="line"></span><br><span class="line">              return</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 第二种情况 改变市</span><br><span class="line">            if (this.values[1] != value[1]) &#123;</span><br><span class="line">              // 保存最新选中的市 避免重复触发</span><br><span class="line">              this.values[1] = value[1]</span><br><span class="line">              // 查询地区信息</span><br><span class="line">              const cname = value[1]</span><br><span class="line">              const area_Res =</span><br><span class="line">                await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(value[0])&#125;&amp;cname=$&#123;encodeURIComponent(cname)&#125;`)</span><br><span class="line">              const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">              this.range[2] = result_Area.list</span><br><span class="line">              // 将地区指向到第一个</span><br><span class="line">              this.selected[2] = 0</span><br><span class="line">              // 赋值地区</span><br><span class="line">              this.values[2] = this.range[2][0]</span><br><span class="line">              return</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 第三种 改变区</span><br><span class="line">            if (this.values[2] != value[2]) &#123;</span><br><span class="line">              // 直接赋值value即可</span><br><span class="line">              this.values[2] = value[2]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 500)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、案例-完整代码"><a href="#四、案例-完整代码" class="headerlink" title="四、案例~完整代码"></a>四、案例~完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import http from &#x27;@ohos.net.http&#x27;;</span><br><span class="line"></span><br><span class="line">interface IResponse &#123;</span><br><span class="line">  message: string</span><br><span class="line">  list: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Day03_06_AreaChange &#123;</span><br><span class="line">  @State message: string = &#x27;居住地选择&#x27;;</span><br><span class="line">  @State range: string[][] = [[&#x27;北京&#x27;], [&#x27;北京市&#x27;], [&#x27;东城区&#x27;]]</span><br><span class="line">  @State selected: number[] = [0, 0, 0]</span><br><span class="line">  // 这部分信息的目的是渲染到页面上</span><br><span class="line">  @State values: string[] = [&#x27;北京&#x27;, &#x27;北京市&#x27;, &#x27;东城区&#x27;]</span><br><span class="line">  // 请求对象</span><br><span class="line">  req: http.HttpRequest = http.createHttp()</span><br><span class="line">  @State showSheet: boolean = false</span><br><span class="line">  timeID: number = -1 // 设置定时器id</span><br><span class="line"></span><br><span class="line">  async aboutToAppear() &#123;</span><br><span class="line">    const Province_Res = await this.req.request(&#x27;https://hmajax.itheima.net/api/province&#x27;)</span><br><span class="line">    const result_Pro = JSON.parse(Province_Res.result.toString()) as IResponse</span><br><span class="line">    // 获取省份信息</span><br><span class="line">    this.range[0] = result_Pro.list</span><br><span class="line"></span><br><span class="line">    const city_Res =</span><br><span class="line">      await this.req.request(&#x27;https://hmajax.itheima.net/api/city?pname=&#x27; + encodeURIComponent(this.range[0][0]))</span><br><span class="line">    const result_City = JSON.parse(city_Res.result.toString()) as IResponse</span><br><span class="line">    // 获取省份信息</span><br><span class="line">    this.range[1] = result_City.list</span><br><span class="line"></span><br><span class="line">    const area_Res =</span><br><span class="line">      await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(this.range[0][0])&#125;&amp;cname=$&#123;encodeURIComponent(this.range[1][0])&#125;`)</span><br><span class="line">    const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">    this.range[2] = result_Area.list</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column(&#123; space: 10 &#125;) &#123;</span><br><span class="line">      // 标题</span><br><span class="line">      Text(this.message)</span><br><span class="line">        .fontSize(30)</span><br><span class="line">        .fontWeight(FontWeight.Bold)</span><br><span class="line">        .textAlign(TextAlign.Center)</span><br><span class="line">        .width(&#x27;100%&#x27;)</span><br><span class="line">        .margin(&#123; bottom: 20 &#125;)</span><br><span class="line">      //</span><br><span class="line">      Row(&#123; space: 10 &#125;) &#123;</span><br><span class="line">        Text(&#x27;居住地:&#x27;)</span><br><span class="line">          .fontWeight(FontWeight.Bold)</span><br><span class="line">        Text(this.values.join(&#x27;/&#x27;))</span><br><span class="line">          .layoutWeight(1)</span><br><span class="line">          .fontColor(Color.Gray)</span><br><span class="line">          .onClick(() =&gt; &#123;</span><br><span class="line">            this.showSheet = true</span><br><span class="line">          &#125;)</span><br><span class="line">        Image($r(&#x27;app.media.ic_public_arrow_right&#x27;))</span><br><span class="line">          .width(20)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Divider()</span><br><span class="line">      Blank()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .alignItems(HorizontalAlign.Start)</span><br><span class="line">    .padding(20)</span><br><span class="line">    .bindSheet($$this.showSheet, this.areaSheet(), &#123;</span><br><span class="line">      height: 300</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Builder</span><br><span class="line">  areaSheet() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      TextPicker(&#123;</span><br><span class="line">        range: this.range,</span><br><span class="line">        selected: $$this.selected,</span><br><span class="line">        // value: $$this.values //</span><br><span class="line">      &#125;)</span><br><span class="line">        .canLoop(false)</span><br><span class="line">        .onChange(async (value, index) =&gt; &#123;</span><br><span class="line">          // 清除上一次timeID</span><br><span class="line">          clearTimeout(this.timeID)</span><br><span class="line">          // 改变省份</span><br><span class="line">          // 函数防抖</span><br><span class="line">          this.timeID = setTimeout(async () =&gt; &#123;</span><br><span class="line">            // 第一种情况 改变省份：市区都需要重新获取并还原到每列第一个</span><br><span class="line">            if (this.values[0] != value[0]) &#123;</span><br><span class="line">              // 1. 刷新省份</span><br><span class="line">              const Province_Res = value[0]</span><br><span class="line">              // 省份赋值</span><br><span class="line">              this.values[0] = value[0]</span><br><span class="line"></span><br><span class="line">              const city_Res =</span><br><span class="line">                await this.req.request(&#x27;https://hmajax.itheima.net/api/city?pname=&#x27; + encodeURIComponent(Province_Res))</span><br><span class="line">              const result_City = JSON.parse(city_Res.result.toString()) as IResponse</span><br><span class="line">              // 获取省份信息</span><br><span class="line">              this.range[1] = result_City.list</span><br><span class="line">              // 将城市指向到第一个</span><br><span class="line">              this.selected[1] = 0</span><br><span class="line">              // 赋值城市信息</span><br><span class="line">              this.values[1] = this.range[1][0]</span><br><span class="line"></span><br><span class="line">              // 查询地区信息</span><br><span class="line">              const cname = this.range[1][0]</span><br><span class="line">              const area_Res =</span><br><span class="line">                await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(Province_Res)&#125;&amp;cname=$&#123;encodeURIComponent(cname)&#125;`)</span><br><span class="line">              const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">              this.range[2] = result_Area.list</span><br><span class="line">              // 将地区指向到第一个</span><br><span class="line">              this.selected[2] = 0</span><br><span class="line">              // 赋值地区</span><br><span class="line">              this.values[2] = this.range[2][0]</span><br><span class="line"></span><br><span class="line">              return</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 第二种情况 改变市</span><br><span class="line">            if (this.values[1] != value[1]) &#123;</span><br><span class="line">              // 保存最新选中的市 避免重复触发</span><br><span class="line">              this.values[1] = value[1]</span><br><span class="line">              // 查询地区信息</span><br><span class="line">              const cname = value[1]</span><br><span class="line">              const area_Res =</span><br><span class="line">                await this.req.request(`https://hmajax.itheima.net/api/area?pname=$&#123;encodeURIComponent(value[0])&#125;&amp;cname=$&#123;encodeURIComponent(cname)&#125;`)</span><br><span class="line">              const result_Area = JSON.parse(area_Res.result.toString()) as IResponse</span><br><span class="line">              this.range[2] = result_Area.list</span><br><span class="line">              // 将地区指向到第一个</span><br><span class="line">              this.selected[2] = 0</span><br><span class="line">              // 赋值地区</span><br><span class="line">              this.values[2] = this.range[2][0]</span><br><span class="line">              return</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 第三种 改变区</span><br><span class="line">            if (this.values[2] != value[2]) &#123;</span><br><span class="line">              // 直接赋值value即可</span><br><span class="line">              this.values[2] = value[2]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 500)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙应用开发</title>
      <link href="/2025/01/31/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2025/01/31/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="图片下载与上传"><a href="#图片下载与上传" class="headerlink" title="图片下载与上传"></a>图片下载与上传</h1><h2 id="一、图片下载"><a href="#一、图片下载" class="headerlink" title="一、图片下载"></a>一、图片下载</h2><p><img src="/../images/$%7Bfiilename%7D/1753945909359-e659cfb8-6e3f-4d21-a42f-13f53c54c91b.png" alt="img"><img src="/../images/$%7Bfiilename%7D/1753945908866-74d950c4-f8fc-4112-bae3-34796c673d65.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fileIo &#125; from &#x27;@kit.CoreFileKit&#x27;</span><br><span class="line">import &#123; photoAccessHelper &#125; from &#x27;@kit.MediaLibraryKit&#x27;;</span><br><span class="line">import &#123; promptAction &#125; from &#x27;@kit.ArkUI&#x27;;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct FileCopy &#123;</span><br><span class="line">  @State</span><br><span class="line">  list: Resource[] = [</span><br><span class="line">    $r(&quot;app.media.0&quot;),</span><br><span class="line">    $r(&quot;app.media.1&quot;),</span><br><span class="line">    $r(&quot;app.media.3&quot;),</span><br><span class="line">    $r(&quot;app.media.4&quot;),</span><br><span class="line">    $r(&quot;app.media.5&quot;),</span><br><span class="line">    $r(&quot;app.media.6&quot;)</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  // 保存沙箱图片到相册</span><br><span class="line">  async saveImgToAssets() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      let index = 0</span><br><span class="line">      while (index &lt; this.list.length) &#123;</span><br><span class="line">        let context = getContext();</span><br><span class="line">        let phAccessHelper = photoAccessHelper.getPhotoAccessHelper(context);</span><br><span class="line">        // Creating a Media File</span><br><span class="line">        let uri = await phAccessHelper.createAsset(photoAccessHelper.PhotoType.IMAGE, &#x27;jpg&#x27;);</span><br><span class="line">        // Open the created media file and read the local file and convert it to ArrayBuffer for easy filling.</span><br><span class="line">        let file = await fileIo.open(uri, fileIo.OpenMode.READ_WRITE);</span><br><span class="line">        let buffer = getContext(this).resourceManager.getMediaContentSync(this.list[index].id);</span><br><span class="line">        // Write the read ArrayBuffer to the new media file.</span><br><span class="line">        let writeLen = await fileIo.write(file.fd, buffer.buffer);</span><br><span class="line">        await fileIo.close(file);</span><br><span class="line">        index++</span><br><span class="line">      &#125;</span><br><span class="line">      promptAction.showToast(&#123; message: &#x27;下载成功&#x27; &#125;)</span><br><span class="line"></span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">      AlertDialog.show(&#123; message: err.message &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column(&#123; space: 10 &#125;) &#123;</span><br><span class="line">      Row() &#123;</span><br><span class="line">        SaveButton()</span><br><span class="line">          .onClick((event, result: SaveButtonOnClickResult) =&gt; &#123;</span><br><span class="line">            if (result === SaveButtonOnClickResult.SUCCESS) &#123;</span><br><span class="line">              this.saveImgToAssets()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .justifyContent(FlexAlign.Center)</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line"></span><br><span class="line">      GridRow(&#123; columns: 2 &#125;) &#123;</span><br><span class="line">        ForEach(this.list, (item: string) =&gt; &#123;</span><br><span class="line">          GridCol() &#123;</span><br><span class="line">            Image(item)</span><br><span class="line">              .height(150)</span><br><span class="line">              .height(150)</span><br><span class="line">              .borderRadius(4)</span><br><span class="line">          &#125;</span><br><span class="line">          .margin(&#123;</span><br><span class="line">            top: 10</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、图片上传"><a href="#二、图片上传" class="headerlink" title="二、图片上传"></a>二、图片上传</h2><p><img src="/../images/$%7Bfiilename%7D/1753945926145-c7ea1989-7188-45f3-a0b4-3cdf3d0bd3fe.png" alt="img"><img src="/../images/$%7Bfiilename%7D/1753945926086-b29ab86c-ab3a-413f-b124-ac24b5ab5a08.png" alt="img"><img src="/../images/$%7Bfiilename%7D/1753945926362-b888a066-7b43-463a-9293-ba6220cccb89.png" alt="img"><img src="/../images/$%7Bfiilename%7D/1753945926122-45aa2ce3-1108-4ce6-8c74-a382c5d88693.png" alt="img"></p><p>分三步：1.选择图片 2.拷贝图片到缓存目录 3.上传图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">// 1.导入选择器模块和文件管理模块。</span><br><span class="line">import &#123; photoAccessHelper &#125; from &#x27;@kit.MediaLibraryKit&#x27;;</span><br><span class="line">import picker from &#x27;@ohos.file.picker&#x27;;</span><br><span class="line">import fs from &#x27;@ohos.file.fs&#x27;;</span><br><span class="line">import request from &#x27;@ohos.request&#x27;;</span><br><span class="line">import http from &#x27;@ohos.net.http&#x27;;</span><br><span class="line">import image from &#x27;@ohos.multimedia.image&#x27;;</span><br><span class="line"></span><br><span class="line">// 定义类型</span><br><span class="line">interface UploadResponse &#123;</span><br><span class="line">  body: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export interface Response &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 业务状态码，10000成功, 其他失败</span><br><span class="line">   */</span><br><span class="line">  code: number;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 响应数据</span><br><span class="line">   */</span><br><span class="line">  data: Data;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 响应消息</span><br><span class="line">   */</span><br><span class="line">  message: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 响应数据</span><br><span class="line"> */</span><br><span class="line">export interface Data &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 上传成功的图片-在线地址</span><br><span class="line">   */</span><br><span class="line">  url: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Http_upload_Page &#123;</span><br><span class="line">  @State message: string = &#x27;Hello World&#x27;;</span><br><span class="line">  @State imgUrl: string = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      Image(this.imgUrl)</span><br><span class="line">        .width(200).height(200)</span><br><span class="line">      Button(&#x27;上传图片&#x27;)</span><br><span class="line">        .onClick(() =&gt; &#123;</span><br><span class="line">          // 2.创建图片-音频类型文件选择选项实例(实例化选项对象)。</span><br><span class="line">          const photoSelectOptions = new picker.PhotoSelectOptions()</span><br><span class="line">          // 3.选择媒体文件类型和选择媒体文件的最大数目。</span><br><span class="line">          photoSelectOptions.MIMEType = picker.PhotoViewMIMETypes.IMAGE_TYPE; // 过滤选择媒体文件类型为IMAGE</span><br><span class="line">          photoSelectOptions.maxSelectNumber = 1; // 选择媒体文件的最大数目</span><br><span class="line">          const photoViewPicker = new picker.PhotoViewPicker() // 创建 select方法 传入图片选择对象</span><br><span class="line">          photoViewPicker.select(photoSelectOptions)//调用select方法 传入选项对象</span><br><span class="line">            .then((res) =&gt; &#123;</span><br><span class="line">              // AlertDialog.show(&#123;</span><br><span class="line">              //   //因为只传了一张</span><br><span class="line">              //   message: JSON.stringify(res.photoUris[0])</span><br><span class="line">              // &#125;)</span><br><span class="line">              //1.通过picker选择器选取图片-获取图片路径</span><br><span class="line">              //2.将图片转成缓存目录(从缓存目录中完成上传功能)</span><br><span class="line">              //3.完成上传效果</span><br><span class="line">              const uri = res.photoUris[0]</span><br><span class="line">              // 将文件保存到缓存目录(只能上传在缓存目录中的文件)</span><br><span class="line">              const context = getContext(this)</span><br><span class="line">              const fileType = &#x27;jpg&#x27;</span><br><span class="line">              // 生成一个新的文件名</span><br><span class="line">              const fileName = Date.now() + &#x27;.&#x27; + fileType</span><br><span class="line">              // 通过缓存路径+文件名 拼接出完整的路径</span><br><span class="line">              const copyFilePath = context.cacheDir + &#x27;/&#x27; + fileName</span><br><span class="line">              // 将文件 拷贝到 临时目录</span><br><span class="line">              const file = fs.openSync(uri, fs.OpenMode.READ_ONLY)</span><br><span class="line">              fs.copyFileSync(file.fd, copyFilePath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              // 四、上传图片</span><br><span class="line">              // 上传文件信息</span><br><span class="line">              let files: Array&lt;request.File&gt; = [</span><br><span class="line">              // internal://cache/ 固定的，后面跟上 咱们上一步拷贝文件名即可</span><br><span class="line">              // name 和接口文档的要求对上</span><br><span class="line">                &#123;</span><br><span class="line">                  filename: fileName,</span><br><span class="line">                  type: fileType,</span><br><span class="line">                  name: &#x27;img&#x27;,</span><br><span class="line">                  uri: `internal://cache/$&#123;fileName&#125;`</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line"></span><br><span class="line">              // 上传文件的方法</span><br><span class="line">              request.uploadFile(context, &#123;</span><br><span class="line">                url: &#x27;https://hmajax.itheima.net/api/uploadimg&#x27;, // url 地址</span><br><span class="line">                method: http.RequestMethod.POST, // 请求方法</span><br><span class="line">                header: &#123;</span><br><span class="line">                  // 和接口文档的要求的格式对象</span><br><span class="line">                  contentType: &#x27;multipart/form-data&#x27;,</span><br><span class="line">                &#125;,</span><br><span class="line">                files, // 文件信息</span><br><span class="line">                data: [] // 额外提交的数据，不能省略</span><br><span class="line">              &#125;)</span><br><span class="line">                .then((res =&gt; &#123;</span><br><span class="line">                  // 这里可以获取到响应的内容</span><br><span class="line">                  res.on(&#x27;headerReceive&#x27;, (value) =&gt; &#123;</span><br><span class="line">                    // body 是 JSON</span><br><span class="line">                    // AlertDialog.show(&#123;</span><br><span class="line">                    //   message: JSON.stringify(value)</span><br><span class="line">                    // &#125;)</span><br><span class="line">                    // 需要value的body属性</span><br><span class="line">                    const uploadRes = (value as UploadResponse) // value为一个对象不用parse</span><br><span class="line"></span><br><span class="line">                    const response = JSON.parse(uploadRes.body) as Response</span><br><span class="line">                    // AlertDialog.show(&#123;</span><br><span class="line">                    //   message: response.data.url</span><br><span class="line">                    // &#125;)</span><br><span class="line">                    // console.log(&#x27;上传的地址为:&#x27;, response.data.url)</span><br><span class="line"></span><br><span class="line">                    // 把获取到的图片 赋值给 Image进行展示</span><br><span class="line">                    this.imgUrl = response.data.url</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;))</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      // 4.创建图库选择器实例，调用PhotoViewPicker.select接口拉起图库界面进行文件选择。文件选择成功后，返回PhotoSelectResult结果集。</span><br><span class="line">      //用 async 和 await</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //用.then 方法</span><br><span class="line">      // const photoViewPicker1 = new photoAccessHelper.PhotoViewPicker();</span><br><span class="line">      // photoViewPicker1.select(photoSelectOptions)</span><br><span class="line">      //   .then(res =&gt; &#123;</span><br><span class="line">      //     const uri = res.photoUris[0]</span><br><span class="line">      //     AlertDialog.show(&#123; message: &#x27;图片路径为:&#x27; + uri &#125;)</span><br><span class="line">      //    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS http请求</title>
      <link href="/2025/01/28/http%E8%AF%B7%E6%B1%82/"/>
      <url>/2025/01/28/http%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="一、鸿蒙http数据请求"><a href="#一、鸿蒙http数据请求" class="headerlink" title="一、鸿蒙http数据请求"></a>一、鸿蒙http数据请求</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><p><strong>开发的应用可以通过系统内置的 http 模块，通过 HTTP 协议和服务器进行通讯</strong></p><style>.ppysgaxheifa{zoom:50%;}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/http%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82.png" class="ppysgaxheifa" alt="界面展示图片"><ol><li><p><strong>什么是服务器?</strong><br><strong>在网络上提供服务器的一台电脑，比如提供数据服务</strong></p></li><li><p>什么是 http 模块？</p><p>鸿蒙内置的一个模块，可以通过 【HTTP 协议】和服务器进行通信</p><p>3.HTTP协议?</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">规定了客户端和服务器返回的内容【格式】</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在通讯的时候需要按照格式发送内容，才可以进行通讯</span><br></pre></td></tr></table></figure><h3 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 1. 导入</span><br><span class="line">import http from &#x27;@ohos.net.http&#x27;;</span><br><span class="line"></span><br><span class="line">// 2. 创建请求对象</span><br><span class="line">const req = http.createHttp()</span><br><span class="line">// 3. 根据提供好的 地址发送请求，并在 then 中获取服务器响应的内容</span><br><span class="line">req.request(&#x27;请求地址&#x27;)</span><br><span class="line">  .then((res: http.HttpResponse) =&gt; &#123;</span><br><span class="line">    AlertDialog.show(&#123; message: JSON.stringify(res) &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>配置网络权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;module&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;entry&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;entry&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;$string:module_desc&quot;,</span><br><span class="line">    &quot;mainElement&quot;: &quot;EntryAbility&quot;,</span><br><span class="line">    &quot;deviceTypes&quot;: [</span><br><span class="line">      &quot;phone&quot;,</span><br><span class="line">      &quot;tablet&quot;,</span><br><span class="line">      &quot;2in1&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;deliveryWithInstall&quot;: true,</span><br><span class="line">    &quot;installationFree&quot;: false,</span><br><span class="line">    &quot;pages&quot;: &quot;$profile:main_pages&quot;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /****需要在该处添加网络配置权限*****/</span><br><span class="line">    &quot;requestPermissions&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;ohos.permission.INTERNET&quot;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    &quot;abilities&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;name&quot;: &quot;EntryAbility&quot;,</span><br><span class="line">        &quot;srcEntry&quot;: &quot;./ets/entryability/EntryAbility.ets&quot;,</span><br><span class="line">        &quot;description&quot;: &quot;$string:EntryAbility_desc&quot;,</span><br><span class="line">        &quot;icon&quot;: &quot;$media:layered_image&quot;,</span><br><span class="line">        &quot;label&quot;: &quot;$string:EntryAbility_label&quot;,</span><br><span class="line">        &quot;startWindowIcon&quot;: &quot;$media:startIcon&quot;,</span><br><span class="line">        &quot;startWindowBackground&quot;: &quot;$color:start_window_background&quot;,</span><br><span class="line">        &quot;exported&quot;: true,</span><br><span class="line">        &quot;skills&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;entities&quot;: [</span><br><span class="line">              &quot;entity.system.home&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;actions&quot;: [</span><br><span class="line">              &quot;action.system.home&quot;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、URL的认识"><a href="#二、URL的认识" class="headerlink" title="二、URL的认识"></a>二、URL的认识</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><p><strong>URL 的组成</strong></p><ul><li><strong>协议，域名，资源路径</strong></li></ul><style>.jeokfedqkria{}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/URL.png" class="jeokfedqkria" alt="界面展示图片"><p><strong>URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个唯一的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。</strong></p><h3 id="2-2-URL参数查询"><a href="#2-2-URL参数查询" class="headerlink" title="2.2 URL参数查询"></a>2.2 URL参数查询</h3><p><strong>URL查询参数是提供给网络服务器的额外参数。这些参数是用 &amp; 符号分隔的键&#x2F;值对列表。</strong></p><p><strong>目的：让我们获取到指定需求的数据！！！</strong></p><style>.xacqicteknpz{}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/URL%E5%8F%82%E6%95%B0%E6%9F%A5%E8%AF%A2.png" class="xacqicteknpz" alt="界面展示图片"><h4 id="案例：获取n条笑话"><a href="#案例：获取n条笑话" class="headerlink" title="案例：获取n条笑话"></a>案例：获取n条笑话</h4><p><strong>参数: num 笑话数量</strong> **            req.request(**<code>https://api-vue-base.itheima.net/api/joke/list?num=$&#123;this.jokeNum&#125;</code>)</p><style>.yexkqdwfwmgf{zoom:33%;}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E5%BC%80%E5%BF%83%E4%B8%80%E7%AC%91%E8%8E%B7%E5%8F%96n%E6%9D%A1%E7%AC%91%E8%AF%9D.png" class="yexkqdwfwmgf" alt="界面展示图片"><h2 id="三、开心一笑"><a href="#三、开心一笑" class="headerlink" title="三、开心一笑"></a>三、开心一笑</h2><ol><li><strong>默认获取若干条笑话，并渲染到页面上</strong></li><li><strong>下拉刷新</strong></li><li><strong>触底加载更多</strong></li><li><strong>点击返回顶部</strong><style>.mwicpuxxlyja{}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E5%BC%80%E5%BF%83%E4%B8%80%E7%AC%91%E6%A1%88%E4%BE%8B.png" class="mwicpuxxlyja" alt="界面展示图片"></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import http from &#x27;@ohos.net.http&#x27;</span><br><span class="line"></span><br><span class="line">// 创建请求对象</span><br><span class="line">const req = http.createHttp()</span><br><span class="line"></span><br><span class="line">interface JokeRes &#123;</span><br><span class="line">  msg: string</span><br><span class="line">  code: number</span><br><span class="line">  data: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">struct Day01_07_Jokes &#123;</span><br><span class="line">  @State jokes: string [] = []</span><br><span class="line">  jokeNum: number = 5</span><br><span class="line">  @State refreshing: boolean = false</span><br><span class="line">  listScroller: Scroller = new Scroller()</span><br><span class="line">  isLoadingMore: boolean = false</span><br><span class="line"></span><br><span class="line">  getJokeList() &#123;</span><br><span class="line">    req.request(&#x27;https://api-vue-base.itheima.net/api/joke/list?num=&#x27; + this.jokeNum)</span><br><span class="line">      .then((res: http.HttpResponse) =&gt; &#123;</span><br><span class="line">        // AlertDialog.show(&#123;</span><br><span class="line">        //   message: res.result.toString()</span><br><span class="line">        // &#125;)</span><br><span class="line">        const Res = JSON.parse(res.result as string) as JokeRes</span><br><span class="line">        this.jokes = Res.data</span><br><span class="line">        this.refreshing = false</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  aboutToAppear(): void &#123;</span><br><span class="line">    this.getJokeList()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Refresh(&#123; refreshing: $$this.refreshing &#125;) &#123;</span><br><span class="line">      Column() &#123;</span><br><span class="line">        // 顶部</span><br><span class="line">        this.HeaderBuilder()</span><br><span class="line">        // 笑话列表</span><br><span class="line">        List(&#123; space: 10, scroller: this.listScroller &#125;) &#123;</span><br><span class="line">          ForEach(this.jokes, (joke: string) =&gt; &#123;</span><br><span class="line">            ListItem() &#123;</span><br><span class="line">              Column(&#123; space: 10 &#125;) &#123;</span><br><span class="line">                Text(joke.split(&#x27;，&#x27;)[0])</span><br><span class="line">                  .fontSize(20)</span><br><span class="line">                  .fontWeight(600)</span><br><span class="line"></span><br><span class="line">                Row(&#123; space: 15 &#125;) &#123;</span><br><span class="line">                  titleIcon(&#123; icon: $r(&#x27;app.media.ic_public_time&#x27;), info: &#x27;2024-1-1&#x27; &#125;)</span><br><span class="line">                  titleIcon(&#123; icon: $r(&#x27;app.media.ic_public_read&#x27;), info: &#x27;阅读(6666)&#x27; &#125;)</span><br><span class="line">                  titleIcon(&#123; icon: $r(&#x27;app.media.ic_public_comments&#x27;), info: &#x27;评论(123)&#x27; &#125;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Text(joke)</span><br><span class="line">                  .fontSize(15)</span><br><span class="line">                  .fontColor(Color.Gray)</span><br><span class="line">              &#125;</span><br><span class="line">              .width(&#x27;100%&#x27;)</span><br><span class="line">              .alignItems(HorizontalAlign.Start)</span><br><span class="line">              .padding(20)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            .borderRadius(10)</span><br><span class="line">            .backgroundColor(Color.White)</span><br><span class="line">            .shadow(&#123; radius: 2, color: Color.Gray &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          ListItem() &#123;</span><br><span class="line">            LoadingProgress()</span><br><span class="line">              .width(40)</span><br><span class="line">          &#125;.width(&#x27;100%&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding(10)</span><br><span class="line">        .layoutWeight(1)</span><br><span class="line">        .onReachEnd(() =&gt; &#123;</span><br><span class="line">          if (!this.isLoadingMore) &#123;</span><br><span class="line">            this.isLoadingMore = true</span><br><span class="line">            // AlertDialog.show(&#123;</span><br><span class="line">            //   message: &#x27;hello world&#x27;</span><br><span class="line">            // &#125;)</span><br><span class="line">            req.request(&#x27;https://api-vue-base.itheima.net/api/joke/list?num=&#x27; + this.jokeNum)</span><br><span class="line">              .then((res: http.HttpResponse) =&gt; &#123;</span><br><span class="line">                const response = JSON.parse(res.result as string) as JokeRes</span><br><span class="line">                this.jokes.push(...response.data) //展开运算符</span><br><span class="line">                this.isLoadingMore = false</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .width(&#x27;100%&#x27;)</span><br><span class="line">      .height(&#x27;100%&#x27;)</span><br><span class="line">      .backgroundColor(&#x27;#f6f6f6&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .onRefreshing(() =&gt; &#123;</span><br><span class="line">      this.getJokeList()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Builder</span><br><span class="line">  HeaderBuilder() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">      Image($r(&#x27;app.media.ic_public_drawer_filled&#x27;))</span><br><span class="line">        .width(25);</span><br><span class="line"></span><br><span class="line">      Image($r(&#x27;app.media.ic_public_joke_logo&#x27;))</span><br><span class="line">        .width(30)</span><br><span class="line">        .onClick(() =&gt; &#123;</span><br><span class="line">          this.listScroller.scrollTo(&#123;</span><br><span class="line">            xOffset: 0,</span><br><span class="line">            yOffset: 0,</span><br><span class="line">            animation: true</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      Image($r(&#x27;app.media.ic_public_search&#x27;))</span><br><span class="line">        .width(30);</span><br><span class="line">    &#125;</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .justifyContent(FlexAlign.SpaceBetween)</span><br><span class="line">    .height(60)</span><br><span class="line">    .padding(10)</span><br><span class="line">    .border(&#123; width: &#123; bottom: 2 &#125;, color: &#x27;#f0f0f0&#x27; &#125;)</span><br><span class="line">    .backgroundColor(Color.White)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">struct titleIcon &#123;</span><br><span class="line">  icon: ResourceStr = &#x27;&#x27;</span><br><span class="line">  info: string = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">      Image(this.icon)</span><br><span class="line">        .width(15)</span><br><span class="line">        .fillColor(Color.Gray)</span><br><span class="line">      Text(this.info)</span><br><span class="line">        .fontSize(14)</span><br><span class="line">        .fontColor(Color.Gray)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、-请求方法和数据提交"><a href="#四、-请求方法和数据提交" class="headerlink" title="四、 请求方法和数据提交"></a>四、 请求方法和数据提交</h2><p>GET — 获取数据</p><p>POST — 提交数据</p><p>PUT — 修改数据（全部）</p><p>DELETE — 删除数据</p><p>PATCH — 修改数据（部分）</p><p><strong>上面开心一笑案例属于（GET）获取数据这一请求方法</strong><br><strong>日常开发中较为常见的需要提交数据给服务器的场景（POST）：用户登录，在线买东西。</strong></p><p><strong>提交数据基本写法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const req = http.createHttp()</span><br><span class="line">req.request(&#x27;请求地址&#x27;, &#123;</span><br><span class="line">  method: http.RequestMethod.POST, // 通过枚举的方式设置请求方法，如果是 get 可以省略</span><br><span class="line">  extraData: &#123;&#125; // 数据写在 extraData 中 支持 对象 字符串 ArrayBuffer（二进制数据）</span><br><span class="line">  extraData:&#x27;key=value&amp;key2=value2&#x27;// 字符串的话 写成 &#x27;key=value&amp;key2=value2&#x27;....</span><br><span class="line">  // 对象的话需要额外设置其他参数，先用</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-1-请求报文"><a href="#4-1-请求报文" class="headerlink" title="4.1 请求报文"></a>4.1 请求报文</h3><p>请求报文：浏览器按照HTTP协议要求的格式，发送给服务器的内容</p><p>请求报文的组成部分:</p><style>.jjdmtwrybwnp{zoom:33%;}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" class="jjdmtwrybwnp" alt="界面展示图片"><p>1.请求行：请求方法，URL，协议(第一行)</p><p>2.<strong>请求头</strong>：以键值对的格式携带的附加信息，比如：Content-Type（第二行开始到空行）</p><style>.wanvdtribzby{}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E5%A4%B4.png" class="wanvdtribzby" alt="界面展示图片"><p>3.空行：分隔请求头，空行之后的是发送给服务器的资源（空行）</p><p>4.<strong>请求体</strong>：发送的资源（空行之后）</p><style>.azddrbafshdb{}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E4%BD%93.png" class="azddrbafshdb" alt="界面展示图片"><h3 id="4-2-响应报文"><a href="#4-2-响应报文" class="headerlink" title="4.2 响应报文"></a>4.2 响应报文</h3><p>服务器按照HTTP协议要求的格式，返回给浏览器的内容</p><ol><li><strong>响应行（状态行）</strong>：协议、HTTP响应状态码、状态信息(第一行)</li><li><strong>响应头</strong>：以键值对的格式携带的附加信息，比如：Content-Type（第一行到空行）</li><li><strong>空行</strong>：分隔响应头，空行之后的是服务器返回的资源（空行）</li><li><strong>响应体</strong>：返回的资源（空行之后）</li></ol><h2 id="五、我的书架"><a href="#五、我的书架" class="headerlink" title="五、我的书架"></a>五、我的书架</h2><p>请求参数(2种)：Query 1.查询参数   ?key &#x3D; value&amp; key &#x3D; value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Path    2.路径参数    请求路径/value</span><br></pre></td></tr></table></figure><p>完整代码：<a href="https://gitee.com/lai-ruilin/hongmeng-next-my-bookshelf">AndyLucky&#x2F;鸿蒙NEXT我的书架</a></p><style>.knpuaorcjmdm{zoom:50%;}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E4%B9%A6%E6%9E%B6%E9%A6%96%E9%A1%B5.png" class="knpuaorcjmdm" alt="书架首页"><style>.hlbmbsbjieyt{zoom:50%;}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E4%B9%A6%E6%9E%B6%E6%96%B0%E5%A2%9E%E9%A1%B5.png" class="hlbmbsbjieyt" alt="书架修改页"><style>.fsbscwswxpcu{zoom:50%;}</style><img src="/2025/01/28/http%E8%AF%B7%E6%B1%82/%E4%B9%A6%E6%9E%B6%E5%88%A0%E9%99%A4%E9%A1%B5.png" class="fsbscwswxpcu" alt="界面展示图片"><p>书架可以通过网络请求到服务器添加自己喜欢的书籍以及修改 新增 删除</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HarmonyOS一号店</title>
      <link href="/2025/01/25/HarmonyOS%E4%B8%80%E5%8F%B7%E5%BA%97/"/>
      <url>/2025/01/25/HarmonyOS%E4%B8%80%E5%8F%B7%E5%BA%97/</url>
      
        <content type="html"><![CDATA[<p>This is my first Blog !</p><p>鸿蒙开发项目一NO.1 Store一号店</p><h1 id="鸿蒙应用开发-一号店购物车"><a href="#鸿蒙应用开发-一号店购物车" class="headerlink" title="鸿蒙应用开发 - 一号店购物车"></a>鸿蒙应用开发 - 一号店购物车</h1><h2 id="1-一号店界面展示"><a href="#1-一号店界面展示" class="headerlink" title="1.一号店界面展示"></a>1.一号店界面展示</h2><p><img src="/../images/$%7Bfiilename%7D/1753944629070-08fec704-5dec-482e-8c7f-592bc40858e1.png" alt="img"></p><h2 id="2-案例分析"><a href="#2-案例分析" class="headerlink" title="2.案例分析"></a>2.案例分析</h2><h3 id="1-1-项目结构"><a href="#1-1-项目结构" class="headerlink" title="1.1 项目结构"></a>1.1 项目结构</h3><p><img src="/../images/$%7Bfiilename%7D/1753944644184-c55bb912-598b-42dd-960e-7cabb78875ba.png" alt="img"></p><p>在ets文件下新建data文件用于存放数据，page中新建No_1_Main_Page用于显示一号店购物车页面</p><h3 id="1-2-界面分析"><a href="#1-2-界面分析" class="headerlink" title="1.2 界面分析"></a>1.2 界面分析</h3><p><img src="/../images/$%7Bfiilename%7D/1753944658050-8097ce7a-e420-4b8a-8a01-85b93e7d4639.png" alt="img"></p><p><img src="/../images/$%7Bfiilename%7D/1753944672818-af923ea2-47c8-48ae-8fd5-75964de36190.png" alt="img"></p><p>TitleCom：购物车顶部搜索栏</p><p>FrightCom：判断是否可以减免运费</p><p>GoodsListItem：商品列表渲染</p><p>EmptyCom：当购物车位空时显示</p><h2 id="3-代码分析与实现"><a href="#3-代码分析与实现" class="headerlink" title="3.代码分析与实现"></a>3.代码分析与实现</h2><h3 id="3-1-顶部区域（购物车种类）"><a href="#3-1-顶部区域（购物车种类）" class="headerlink" title="3.1 顶部区域（购物车种类）"></a>3.1 顶部区域（购物车种类）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 标题(显示商品种类)</span><br><span class="line">@Component</span><br><span class="line">struct TitleCom &#123;</span><br><span class="line">  @Prop typeSize: number</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">      // 文字</span><br><span class="line">      Stack(&#123; alignContent: Alignment.Bottom &#125;) &#123;</span><br><span class="line">        Text(`购物车($&#123;this.typeSize&#125; )`)</span><br><span class="line">          .height(&#x27;100%&#x27;)</span><br><span class="line">        Text(&#x27;&#x27;)</span><br><span class="line">          .width(25)</span><br><span class="line">          .height(2)</span><br><span class="line">          .linearGradient(&#123; angle: 90, colors: [[MAIN_RED, 0], [Color.White, 1]] &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      .height(&#x27;100%&#x27;)</span><br><span class="line"></span><br><span class="line">      // 地址</span><br><span class="line">      Row() &#123;</span><br><span class="line">        Image($r(&#x27;app.media.ic_yhd_location&#x27;))</span><br><span class="line">          .width(15)</span><br><span class="line">          .fillColor(DEEP_GRAY)</span><br><span class="line">        Text(&#x27;北京市昌平区&#x27;)</span><br><span class="line">          .fontSize(12)</span><br><span class="line">          .fontColor(DEEP_GRAY)</span><br><span class="line">      &#125;</span><br><span class="line">      .height(20)</span><br><span class="line">      .padding(&#123; left: 5, right: 5 &#125;)</span><br><span class="line">      .borderRadius(10)</span><br><span class="line">      .backgroundColor(LIGHT_GRAY)</span><br><span class="line"></span><br><span class="line">      // 编辑</span><br><span class="line">      Text(&#x27;编辑&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    .padding(&#123; left: 20, right: 20 &#125;)</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .height(40)</span><br><span class="line">    .justifyContent(FlexAlign.SpaceBetween)</span><br><span class="line">    .backgroundColor(Color.White)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了判断购物车当前商品种类，需要从父组件传递typeSize值到子组件，此时需要用到@Prop进行父子组件之间的数据传递</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      // 标题</span><br><span class="line">      TitleCom(&#123; typeSize: this.list.length &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(LIGHT_GRAY)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在父组件中直接传递list数组的长度即为当前商品种类数量</p><h3 id="3-2-中间内容区域"><a href="#3-2-中间内容区域" class="headerlink" title="3.2 中间内容区域"></a>3.2 中间内容区域</h3><p><img src="/../images/$%7Bfiilename%7D/1753944694937-965a792b-9fad-4d2e-aaaf-6deef0a4b9ef.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 内容区域</span><br><span class="line">@Component</span><br><span class="line">struct ContentCom &#123;</span><br><span class="line">  @Link list: CartGood[]</span><br><span class="line"></span><br><span class="line">  @Builder</span><br><span class="line">  delAction(id: string) &#123;</span><br><span class="line">    Text(`删除`)</span><br><span class="line">      .fontColor(Color.White)</span><br><span class="line">      .backgroundColor(Color.Red)</span><br><span class="line">      .height(&#x27;100%&#x27;)</span><br><span class="line">      .width(70)</span><br><span class="line">      .textAlign(TextAlign.Center)</span><br><span class="line">      .onClick(() =&gt; &#123;</span><br><span class="line">        //删除的索引值</span><br><span class="line">        let delIndex: number = 0</span><br><span class="line">        //循环遍历list找到准确的index</span><br><span class="line">        this.list.forEach((item: CartGood, index: number) =&gt; &#123;</span><br><span class="line">          if (item.id == id) &#123;</span><br><span class="line"></span><br><span class="line">            //找到</span><br><span class="line">            delIndex = index</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        this.list.splice(delIndex, 1)</span><br><span class="line">        //console.log(delIndex.toString())</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Scroll() &#123;</span><br><span class="line">      Column() &#123;</span><br><span class="line">        // 支付</span><br><span class="line">        FreightCom()</span><br><span class="line">          .margin(10)</span><br><span class="line">        // 商品列表</span><br><span class="line">        Column(&#123; space: 10 &#125;) &#123;</span><br><span class="line">          ListTitleCom()</span><br><span class="line">          // 自营区域</span><br><span class="line">          List() &#123;</span><br><span class="line">            ForEach(this.list, (item: CartGood, index: number) =&gt; &#123;</span><br><span class="line">              ListItem() &#123;</span><br><span class="line">                GoodsListItem(&#123; listItem: item &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">              .swipeAction(&#123; end: this.delAction(item.id) &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">              (item: CartGood, index: number) =&gt; &#123;</span><br><span class="line">                return item.id</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">          .divider(&#123;</span><br><span class="line">            strokeWidth: .5,</span><br><span class="line">            startMargin: 10,</span><br><span class="line">            endMargin: 10,</span><br><span class="line">            color: DEEP_GRAY</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        .backgroundColor(Color.White)</span><br><span class="line">        .margin(&#123; left: 10, right: 10 &#125;)</span><br><span class="line"></span><br><span class="line">        // 空车 商品为空时显示</span><br><span class="line">        if (this.list.length == 0) &#123;</span><br><span class="line">          EmptyCom()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .align(Alignment.Top)</span><br><span class="line">    .padding(&#123; bottom: 10 &#125;)</span><br><span class="line">    .edgeEffect(EdgeEffect.Spring)</span><br><span class="line">    .layoutWeight(1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择删除</p><p><img src="/../images/$%7Bfiilename%7D/1753944709768-ad5d361c-56b4-46f6-b207-56b09d7fe980.png" alt="img"></p><p>利用到ListItem的一个属性</p><p><img src="/../images/$%7Bfiilename%7D/1753944753521-977c2916-e727-4df9-a4c2-1d0fb05190f6.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List() &#123;</span><br><span class="line">            ForEach(this.list, (item: CartGood, index: number) =&gt; &#123;</span><br><span class="line">              ListItem() &#123;</span><br><span class="line">                GoodsListItem(&#123; listItem: item &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">              .swipeAction(&#123; end: this.delAction(item.id) &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">              (item: CartGood, index: number) =&gt; &#123;</span><br><span class="line">                return item.id</span><br><span class="line">              &#125;</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-底部结算"><a href="#3-3-底部结算" class="headerlink" title="3.3 底部结算"></a>3.3 底部结算</h3><p><img src="/../images/$%7Bfiilename%7D/1753944735747-8e1461f9-ee3d-4f80-84d5-e4ed3d0c6328.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 支付（最下方组件）</span><br><span class="line">@Component</span><br><span class="line">struct PayCom &#123;</span><br><span class="line">  @Link selectedIds: string[]</span><br><span class="line">  @Consume totalPrice: number</span><br><span class="line">  @Prop totalCount: number</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Row() &#123;</span><br><span class="line">      Row() &#123;</span><br><span class="line">        CheckboxGroup(&#123;</span><br><span class="line">          group: &#x27;cart&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">          .selectedColor(MAIN_RED)</span><br><span class="line">          .onChange((res: CheckboxGroupResult) =&gt; &#123;</span><br><span class="line">            this.selectedIds = res.name</span><br><span class="line">            //console.log(JSON.stringify(res))</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">        Text(&#x27;全选&#x27;)</span><br><span class="line">          .fontSize(12)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Row() &#123;</span><br><span class="line">        Text(&#x27;合计:&#x27;)</span><br><span class="line">          .fontSize(14)</span><br><span class="line">        PriceCom(&#123;</span><br><span class="line">          fontColor: Color.Black,</span><br><span class="line">          price: this.totalPrice</span><br><span class="line">        &#125;)</span><br><span class="line">        Button(`入会结算($&#123;this.totalCount&#125;)`)</span><br><span class="line">          .fontColor(&#x27;#ffe3cc&#x27;)</span><br><span class="line">          .backgroundColor(Color.Black)</span><br><span class="line">          .fontSize(14)</span><br><span class="line">          .margin(&#123; left: 5 &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .justifyContent(FlexAlign.SpaceBetween)</span><br><span class="line">    .padding(&#123; left: 10, right: 10 &#125;)</span><br><span class="line">    .height(48)</span><br><span class="line">    .width(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(Color.White)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 价格（根据传入的价格渲染数字）</span><br><span class="line">@Component</span><br><span class="line">struct PriceCom &#123;</span><br><span class="line">  @Prop price: number = 0</span><br><span class="line">  fontColor: ResourceColor = MAIN_RED</span><br><span class="line">  discard: boolean = false</span><br><span class="line"></span><br><span class="line">  getSplicePrice() &#123;</span><br><span class="line">    return this.price.toFixed(2)</span><br><span class="line">      .split(&#x27;.&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Text() &#123;</span><br><span class="line">      Span(&#x27;¥&#x27;)</span><br><span class="line">        .fontSize(12)</span><br><span class="line">      Span(this.getSplicePrice()[0]</span><br><span class="line">        .toString())</span><br><span class="line">        .fontSize(this.discard ? 12 : 16)</span><br><span class="line">        .fontWeight(600)</span><br><span class="line">      Span(&#x27;.&#x27;)</span><br><span class="line">      Span(this.getSplicePrice()[1] == undefined ? &#x27;00&#x27; : this.getSplicePrice()[1])</span><br><span class="line">        .fontSize(12)</span><br><span class="line">    &#125;</span><br><span class="line">    .fontColor(this.fontColor)</span><br><span class="line">    .decoration(&#123; type: this.discard ? TextDecorationType.LineThrough : TextDecorationType.None &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在渲染底部的结算价钱和结算商品数量以及筛选出来的选中商品列表需要从父组件传入相应的值</p><p>在父组件中需要用到数组对应的方法来实现reduce（求和）filter（筛选）include</p><p>@Watch监管选中商品列表的变化 一旦商品列表发生变化就会执行对应的方法 selectedIdChange</p><p>从父组件需要传递给子组件以及孙组件所以需要使用@Provide来修饰</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@Entry</span><br><span class="line">@Component</span><br><span class="line">export default struct Main &#123;</span><br><span class="line">  @State</span><br><span class="line">  list: CartGood[] = goodList</span><br><span class="line">  @Provide totalPrice: number = 0 //总价</span><br><span class="line">  @State totalCount: number = 0</span><br><span class="line">  @State //选中的ID</span><br><span class="line">  @Watch(&#x27;selectedIdChange&#x27;)</span><br><span class="line">  selectedIds: string[] = []</span><br><span class="line"></span><br><span class="line">  selectedIdChange() &#123;</span><br><span class="line">    const arr = this.list.filter((item: CartGood) =&gt; &#123;</span><br><span class="line">      if (this.selectedIds.includes(item.id)) &#123;</span><br><span class="line">        return true</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //console.log(JSON.stringify(arr))</span><br><span class="line">    const totalCount = arr.reduce((prev: number, item: CartGood) =&gt; &#123;</span><br><span class="line">      return prev + item.count</span><br><span class="line">    &#125;, 0)</span><br><span class="line">    this.totalCount = totalCount</span><br><span class="line"></span><br><span class="line">    const totalPrice = arr.reduce((prev: number, item: CartGood) =&gt; &#123;</span><br><span class="line">      return prev + item.count * item.good.jdPrice</span><br><span class="line">    &#125;, 0)</span><br><span class="line">    this.totalPrice = totalPrice</span><br><span class="line">    //console.log(totalPrice.toString())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    Column() &#123;</span><br><span class="line">      // 标题</span><br><span class="line">      TitleCom(&#123; typeSize: this.list.length &#125;)</span><br><span class="line">      // 内容</span><br><span class="line">      ContentCom(&#123; list: this.list &#125;)</span><br><span class="line"></span><br><span class="line">      // 支付</span><br><span class="line">      PayCom(&#123;</span><br><span class="line">        selectedIds: this.selectedIds,</span><br><span class="line">        totalCount: this.totalCount,</span><br><span class="line">        //totalPrice: this.totalPrice</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    .height(&#x27;100%&#x27;)</span><br><span class="line">    .backgroundColor(LIGHT_GRAY)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4运费"><a href="#3-4运费" class="headerlink" title="3.4运费"></a>3.4运费</h3><p><img src="/../images/$%7Bfiilename%7D/1753944907602-0e847ee6-cbf2-4fdc-ae63-64f021d8afa8.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">// 运费（地址下方）</span><br><span class="line">@Component</span><br><span class="line">struct FreightCom &#123;</span><br><span class="line">// 默认 69 可以由外部传入</span><br><span class="line">minPrice: number = 69.00</span><br><span class="line">@Consume totalPrice: number</span><br><span class="line"></span><br><span class="line">build() &#123;</span><br><span class="line">Column() &#123;</span><br><span class="line">if (this.totalPrice &lt; this.minPrice) &#123;</span><br><span class="line">// 运费不够 提示</span><br><span class="line">Row() &#123;</span><br><span class="line">Row(&#123; space: 5 &#125;) &#123;</span><br><span class="line">// 凑单免运费</span><br><span class="line">Text() &#123;</span><br><span class="line">Span(&#x27;凑单&#x27;)</span><br><span class="line">Span(&#x27;免运费&#x27;)</span><br><span class="line">.fontColor(MAIN_RED)</span><br><span class="line">&#125;</span><br><span class="line">.fontSize(13)</span><br><span class="line">.fontFamily(&#x27;medium&#x27;)</span><br><span class="line"></span><br><span class="line">// 分割线</span><br><span class="line">Divider()</span><br><span class="line">.vertical(true)</span><br><span class="line">.height(8)</span><br><span class="line">.color(DEEP_GRAY)</span><br><span class="line">.strokeWidth(1)</span><br><span class="line"></span><br><span class="line">// 运费信息</span><br><span class="line">Row() &#123;</span><br><span class="line">Text() &#123;</span><br><span class="line">Span(&#x27;还需凑钱 &#x27;)</span><br><span class="line">Span(`¥$&#123;(this.minPrice - this.totalPrice).toFixed(2)&#125;`)</span><br><span class="line">.fontColor(MAIN_RED)</span><br><span class="line">Span(&#x27;可免运费&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">.fontSize(13)</span><br><span class="line"></span><br><span class="line">Image($r(&#x27;app.media.ic_yhd_order_info&#x27;))</span><br><span class="line">.width(15)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 按钮</span><br><span class="line">Button() &#123;</span><br><span class="line">Row() &#123;</span><br><span class="line">Text(&#x27;去凑单&#x27;)</span><br><span class="line">.fontColor(Color.White)</span><br><span class="line">.fontSize(12)</span><br><span class="line">Image($r(&#x27;app.media.ic_public_arrow_right&#x27;))</span><br><span class="line">.height(14)</span><br><span class="line">.width(10)</span><br><span class="line">.fillColor(Color.White)</span><br><span class="line">&#125;</span><br><span class="line">.backgroundColor(MAIN_RED)</span><br><span class="line">.borderRadius(20)</span><br><span class="line">.padding(&#123;</span><br><span class="line">left: 10,</span><br><span class="line">top: 3,</span><br><span class="line">bottom: 3,</span><br><span class="line">right: 2</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 运费足够 提示</span><br><span class="line">Row(&#123; space: 5 &#125;) &#123;</span><br><span class="line">Text(&#x27;运费&#x27;)</span><br><span class="line">.backgroundColor(MAIN_RED)</span><br><span class="line">.fontSize(12)</span><br><span class="line">.fontColor(Color.White)</span><br><span class="line">.padding(2)</span><br><span class="line">.borderRadius(3)</span><br><span class="line">Divider()</span><br><span class="line">.vertical(true)</span><br><span class="line">.height(12)</span><br><span class="line">.strokeWidth(2)</span><br><span class="line">Text(&#x27;已免运费&#x27;)</span><br><span class="line">.fontSize(12)</span><br><span class="line">.fontColor(Color.Gray)</span><br><span class="line">Image(&#x27;/common/day08-10/yhd/ic_yhd_order_info.png&#x27;)</span><br><span class="line">.width(15)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.borderRadius(5)</span><br><span class="line">.height(30)</span><br><span class="line">.padding(&#123; left: 8, right: 8 &#125;)</span><br><span class="line">.linearGradient(&#123; colors: [[&#x27;#ffe8ea&#x27;, 0], [Color.White, 1]] &#125;)</span><br><span class="line">.width(&#x27;100%&#x27;)</span><br><span class="line">.justifyContent(FlexAlign.Center)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
